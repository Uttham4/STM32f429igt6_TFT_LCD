
stm32f429I_LTDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004e8e8  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08054f30  08054f30  00070080  2**0
                  CONTENTS
  4 .ARM          00000008  08054f30  08054f30  00064f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08054f38  08054f38  00070080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08054f38  08054f38  00064f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08054f3c  08054f3c  00064f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08054f40  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070080  2**0
                  CONTENTS
 10 .bss          00000360  20000080  20000080  00070080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  00070080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000700b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011b18  00000000  00000000  000700f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e44  00000000  00000000  00081c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd8  00000000  00000000  00084a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002459c  00000000  00000000  00085a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001512b  00000000  00000000  000a9fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbcce  00000000  00000000  000bf0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000bde  00000000  00000000  0019adbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000451c  00000000  00000000  0019b99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0019feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006630 	.word	0x08006630

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08006630 	.word	0x08006630

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8000590:	20ca      	movs	r0, #202	; 0xca
 8000592:	f000 f943 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8000596:	20c3      	movs	r0, #195	; 0xc3
 8000598:	f000 f96a 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x08);
 800059c:	2008      	movs	r0, #8
 800059e:	f000 f967 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x50);
 80005a2:	2050      	movs	r0, #80	; 0x50
 80005a4:	f000 f964 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 80005a8:	20cf      	movs	r0, #207	; 0xcf
 80005aa:	f000 f937 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f95e 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80005b4:	20c1      	movs	r0, #193	; 0xc1
 80005b6:	f000 f95b 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x30);
 80005ba:	2030      	movs	r0, #48	; 0x30
 80005bc:	f000 f958 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 80005c0:	20ed      	movs	r0, #237	; 0xed
 80005c2:	f000 f92b 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 80005c6:	2064      	movs	r0, #100	; 0x64
 80005c8:	f000 f952 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x03);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f94f 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x12);
 80005d2:	2012      	movs	r0, #18
 80005d4:	f000 f94c 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x81);
 80005d8:	2081      	movs	r0, #129	; 0x81
 80005da:	f000 f949 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 80005de:	20e8      	movs	r0, #232	; 0xe8
 80005e0:	f000 f91c 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 80005e4:	2085      	movs	r0, #133	; 0x85
 80005e6:	f000 f943 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f940 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x78);
 80005f0:	2078      	movs	r0, #120	; 0x78
 80005f2:	f000 f93d 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 80005f6:	20cb      	movs	r0, #203	; 0xcb
 80005f8:	f000 f910 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 80005fc:	2039      	movs	r0, #57	; 0x39
 80005fe:	f000 f937 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8000602:	202c      	movs	r0, #44	; 0x2c
 8000604:	f000 f934 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f931 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x34);
 800060e:	2034      	movs	r0, #52	; 0x34
 8000610:	f000 f92e 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x02);
 8000614:	2002      	movs	r0, #2
 8000616:	f000 f92b 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 800061a:	20f7      	movs	r0, #247	; 0xf7
 800061c:	f000 f8fe 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8000620:	2020      	movs	r0, #32
 8000622:	f000 f925 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8000626:	20ea      	movs	r0, #234	; 0xea
 8000628:	f000 f8f8 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f91f 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f91c 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8000638:	20b1      	movs	r0, #177	; 0xb1
 800063a:	f000 f8ef 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f916 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8000644:	201b      	movs	r0, #27
 8000646:	f000 f913 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 800064a:	20b6      	movs	r0, #182	; 0xb6
 800064c:	f000 f8e6 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 f90d 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8000656:	20a2      	movs	r0, #162	; 0xa2
 8000658:	f000 f90a 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 800065c:	20c0      	movs	r0, #192	; 0xc0
 800065e:	f000 f8dd 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8000662:	2010      	movs	r0, #16
 8000664:	f000 f904 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8000668:	20c1      	movs	r0, #193	; 0xc1
 800066a:	f000 f8d7 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 800066e:	2010      	movs	r0, #16
 8000670:	f000 f8fe 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8000674:	20c5      	movs	r0, #197	; 0xc5
 8000676:	f000 f8d1 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x45);
 800067a:	2045      	movs	r0, #69	; 0x45
 800067c:	f000 f8f8 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x15);
 8000680:	2015      	movs	r0, #21
 8000682:	f000 f8f5 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8000686:	20c7      	movs	r0, #199	; 0xc7
 8000688:	f000 f8c8 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x90);
 800068c:	2090      	movs	r0, #144	; 0x90
 800068e:	f000 f8ef 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8000692:	2036      	movs	r0, #54	; 0x36
 8000694:	f000 f8c2 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8000698:	20c8      	movs	r0, #200	; 0xc8
 800069a:	f000 f8e9 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 800069e:	20f2      	movs	r0, #242	; 0xf2
 80006a0:	f000 f8bc 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f8e3 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 80006aa:	20b0      	movs	r0, #176	; 0xb0
 80006ac:	f000 f8b6 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 80006b0:	20c2      	movs	r0, #194	; 0xc2
 80006b2:	f000 f8dd 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 80006b6:	20b6      	movs	r0, #182	; 0xb6
 80006b8:	f000 f8b0 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 f8d7 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0xA7);
 80006c2:	20a7      	movs	r0, #167	; 0xa7
 80006c4:	f000 f8d4 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x27);
 80006c8:	2027      	movs	r0, #39	; 0x27
 80006ca:	f000 f8d1 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x04);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 f8ce 	bl	8000870 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 80006d4:	202a      	movs	r0, #42	; 0x2a
 80006d6:	f000 f8a1 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f8c8 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f8c5 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f8c2 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0xEF);
 80006ec:	20ef      	movs	r0, #239	; 0xef
 80006ee:	f000 f8bf 	bl	8000870 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 80006f2:	202b      	movs	r0, #43	; 0x2b
 80006f4:	f000 f892 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 f8b9 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f8b6 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x01);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 f8b3 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x3F);
 800070a:	203f      	movs	r0, #63	; 0x3f
 800070c:	f000 f8b0 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8000710:	20f6      	movs	r0, #246	; 0xf6
 8000712:	f000 f883 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 f8aa 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f8a7 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x06);
 8000722:	2006      	movs	r0, #6
 8000724:	f000 f8a4 	bl	8000870 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8000728:	202c      	movs	r0, #44	; 0x2c
 800072a:	f000 f877 	bl	800081c <LCD_WriteCommand>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f001 fe4a 	bl	80023c8 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8000734:	2026      	movs	r0, #38	; 0x26
 8000736:	f000 f871 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f898 	bl	8000870 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8000740:	20e0      	movs	r0, #224	; 0xe0
 8000742:	f000 f86b 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8000746:	200f      	movs	r0, #15
 8000748:	f000 f892 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x29);
 800074c:	2029      	movs	r0, #41	; 0x29
 800074e:	f000 f88f 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x24);
 8000752:	2024      	movs	r0, #36	; 0x24
 8000754:	f000 f88c 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 f889 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800075e:	200e      	movs	r0, #14
 8000760:	f000 f886 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x09);
 8000764:	2009      	movs	r0, #9
 8000766:	f000 f883 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x4E);
 800076a:	204e      	movs	r0, #78	; 0x4e
 800076c:	f000 f880 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x78);
 8000770:	2078      	movs	r0, #120	; 0x78
 8000772:	f000 f87d 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8000776:	203c      	movs	r0, #60	; 0x3c
 8000778:	f000 f87a 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x09);
 800077c:	2009      	movs	r0, #9
 800077e:	f000 f877 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x13);
 8000782:	2013      	movs	r0, #19
 8000784:	f000 f874 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x05);
 8000788:	2005      	movs	r0, #5
 800078a:	f000 f871 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x17);
 800078e:	2017      	movs	r0, #23
 8000790:	f000 f86e 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x11);
 8000794:	2011      	movs	r0, #17
 8000796:	f000 f86b 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x00);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f868 	bl	8000870 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 80007a0:	20e1      	movs	r0, #225	; 0xe1
 80007a2:	f000 f83b 	bl	800081c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f862 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x16);
 80007ac:	2016      	movs	r0, #22
 80007ae:	f000 f85f 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80007b2:	201b      	movs	r0, #27
 80007b4:	f000 f85c 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x04);
 80007b8:	2004      	movs	r0, #4
 80007ba:	f000 f859 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x11);
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 f856 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x07);
 80007c4:	2007      	movs	r0, #7
 80007c6:	f000 f853 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x31);
 80007ca:	2031      	movs	r0, #49	; 0x31
 80007cc:	f000 f850 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x33);
 80007d0:	2033      	movs	r0, #51	; 0x33
 80007d2:	f000 f84d 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x42);
 80007d6:	2042      	movs	r0, #66	; 0x42
 80007d8:	f000 f84a 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x05);
 80007dc:	2005      	movs	r0, #5
 80007de:	f000 f847 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80007e2:	200c      	movs	r0, #12
 80007e4:	f000 f844 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x0A);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f000 f841 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x28);
 80007ee:	2028      	movs	r0, #40	; 0x28
 80007f0:	f000 f83e 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x2F);
 80007f4:	202f      	movs	r0, #47	; 0x2f
 80007f6:	f000 f83b 	bl	8000870 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f000 f838 	bl	8000870 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8000800:	2011      	movs	r0, #17
 8000802:	f000 f80b 	bl	800081c <LCD_WriteCommand>
	HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f001 fdde 	bl	80023c8 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 800080c:	2029      	movs	r0, #41	; 0x29
 800080e:	f000 f805 	bl	800081c <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8000812:	202c      	movs	r0, #44	; 0x2c
 8000814:	f000 f802 	bl	800081c <LCD_WriteCommand>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	733b      	strb	r3, [r7, #12]
 800082a:	2300      	movs	r3, #0
 800082c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <LCD_WriteCommand+0x48>)
 8000836:	f002 fc43 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2104      	movs	r1, #4
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <LCD_WriteCommand+0x4c>)
 8000840:	f002 fc3e 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8000844:	f107 010c 	add.w	r1, r7, #12
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <LCD_WriteCommand+0x50>)
 800084e:	f004 ff11 	bl	8005674 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2104      	movs	r1, #4
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <LCD_WriteCommand+0x4c>)
 8000858:	f002 fc32 	bl	80030c0 <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40020800 	.word	0x40020800
 800086c:	200001e8 	.word	0x200001e8

08000870 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	733b      	strb	r3, [r7, #12]
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <LCD_WriteData+0x48>)
 800088a:	f002 fc19 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2104      	movs	r1, #4
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <LCD_WriteData+0x4c>)
 8000894:	f002 fc14 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8000898:	f107 010c 	add.w	r1, r7, #12
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	2201      	movs	r2, #1
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <LCD_WriteData+0x50>)
 80008a2:	f004 fee7 	bl	8005674 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2104      	movs	r1, #4
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <LCD_WriteData+0x4c>)
 80008ac:	f002 fc08 	bl	80030c0 <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	200001e8 	.word	0x200001e8

080008c4 <LCD_FillScreen>:

void LCD_FillScreen(uint32_t color)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <LCD_FillScreen+0x50>)
 80008ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008d2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <LCD_FillScreen+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <LCD_FillScreen+0x50>)
 80008dc:	f001 fea9 	bl	8002632 <HAL_DMA2D_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d112      	bne.n	800090c <LCD_FillScreen+0x48>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <LCD_FillScreen+0x54>)
 80008e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LCD_FillScreen+0x54>)
 80008ec:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <LCD_FillScreen+0x54>)
 80008f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	460b      	mov	r3, r1
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <LCD_FillScreen+0x50>)
 80008fa:	f001 fee3 	bl	80026c4 <HAL_DMA2D_Start>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <LCD_FillScreen+0x48>
				hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8000904:	210a      	movs	r1, #10
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <LCD_FillScreen+0x50>)
 8000908:	f001 ff07 	bl	800271a <HAL_DMA2D_PollForTransfer>
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
	for (uint32_t i = 0; i < (n); i++)
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
	}*/
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000ac 	.word	0x200000ac
 8000918:	20000140 	.word	0x20000140

0800091c <LCD_Test>:

void LCD_Test(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
	uint32_t color = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <LCD_Test+0x64>)
 8000928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <LCD_Test+0x64>)
 800092c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < (n); i++)
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	e016      	b.n	8000968 <LCD_Test+0x4c>
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <LCD_Test+0x64>)
 800093c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	440b      	add	r3, r1
 8000948:	461a      	mov	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6013      	str	r3, [r2, #0]
		color++;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
		if (color == 0xFFFFFF)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <LCD_Test+0x46>
		{
			color = 0x00;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < (n); i++)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3301      	adds	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3e4      	bcc.n	800093a <LCD_Test+0x1e>
		}
	}
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000140 	.word	0x20000140

08000984 <LCD_DrawPixel>:
    }
    while (x <= 0);
}

void LCD_DrawPixel(uint32_t x, uint32_t y, uint32_t color)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <LCD_DrawPixel+0x64>)
 8000992:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000996:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <LCD_DrawPixel+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <LCD_DrawPixel+0x64>)
 80009a0:	f001 fe47 	bl	8002632 <HAL_DMA2D_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11a      	bne.n	80009e0 <LCD_DrawPixel+0x5c>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <LCD_DrawPixel+0x68>)
 80009ac:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <LCD_DrawPixel+0x68>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	fb03 f202 	mul.w	r2, r3, r2
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	441a      	add	r2, r3
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	18ca      	adds	r2, r1, r3
 80009c4:	2301      	movs	r3, #1
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2301      	movs	r3, #1
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <LCD_DrawPixel+0x64>)
 80009ce:	f001 fe79 	bl	80026c4 <HAL_DMA2D_Start>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d103      	bne.n	80009e0 <LCD_DrawPixel+0x5c>
				, 1, 1) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80009d8:	210a      	movs	r1, #10
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <LCD_DrawPixel+0x64>)
 80009dc:	f001 fe9d 	bl	800271a <HAL_DMA2D_PollForTransfer>
		}
	}
	//*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))) = color;
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000ac 	.word	0x200000ac
 80009ec:	20000140 	.word	0x20000140

080009f0 <LCD_FontsInit>:
		}
	}
}

void LCD_FontsInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	lcdProp.BackColor = LCD_COLOR_BLACK;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LCD_FontsInit+0x24>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
	lcdProp.TextColor = LCD_COLOR_GREEN;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LCD_FontsInit+0x24>)
 80009fc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000a00:	601a      	str	r2, [r3, #0]
	lcdProp.pFont = &Font16;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LCD_FontsInit+0x24>)
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <LCD_FontsInit+0x28>)
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000009c 	.word	0x2000009c
 8000a18:	20000000 	.word	0x20000000

08000a1c <LCD_SetFont>:

void LCD_SetFont(sFONT *fonts)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	lcdProp.pFont = fonts;
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <LCD_SetFont+0x1c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6093      	str	r3, [r2, #8]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000009c 	.word	0x2000009c

08000a3c <LCD_SetTextColor>:

void LCD_SetTextColor(uint32_t color)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	lcdProp.TextColor = color;
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <LCD_SetTextColor+0x1c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000009c 	.word	0x2000009c

08000a5c <LCD_SetBackColor>:

void LCD_SetBackColor(uint32_t color)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	lcdProp.BackColor = color;
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <LCD_SetBackColor+0x1c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6053      	str	r3, [r2, #4]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000009c 	.word	0x2000009c

08000a7c <LCD_DrawChar>:

void LCD_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	70fb      	strb	r3, [r7, #3]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  ch = &lcdProp.pFont->table[(c-' ') * lcdProp.pFont->Height * ((lcdProp.pFont->Width + 7) / 8)];
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	3b20      	subs	r3, #32
 8000a98:	494b      	ldr	r1, [pc, #300]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000a9a:	6889      	ldr	r1, [r1, #8]
 8000a9c:	88c9      	ldrh	r1, [r1, #6]
 8000a9e:	fb03 f101 	mul.w	r1, r3, r1
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	889b      	ldrh	r3, [r3, #4]
 8000aa8:	3307      	adds	r3, #7
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da00      	bge.n	8000ab0 <LCD_DrawChar+0x34>
 8000aae:	3307      	adds	r3, #7
 8000ab0:	10db      	asrs	r3, r3, #3
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <LCD_DrawChar+0x150>)
 8000aba:	6013      	str	r3, [r2, #0]
  height = lcdProp.pFont->Height;
 8000abc:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	88db      	ldrh	r3, [r3, #6]
 8000ac2:	827b      	strh	r3, [r7, #18]
  width = lcdProp.pFont->Width;
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	889b      	ldrh	r3, [r3, #4]
 8000aca:	823b      	strh	r3, [r7, #16]
  offset = 8*((width + 7)/8) - width;
 8000acc:	8a3b      	ldrh	r3, [r7, #16]
 8000ace:	3307      	adds	r3, #7
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da00      	bge.n	8000ad6 <LCD_DrawChar+0x5a>
 8000ad4:	3307      	adds	r3, #7
 8000ad6:	10db      	asrs	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	8a3b      	ldrh	r3, [r7, #16]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	73fb      	strb	r3, [r7, #15]

  for (uint32_t i = 0; i < height; i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e064      	b.n	8000bb6 <LCD_DrawChar+0x13a>
  {
	  pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <LCD_DrawChar+0x150>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	8a3b      	ldrh	r3, [r7, #16]
 8000af2:	3307      	adds	r3, #7
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da00      	bge.n	8000afa <LCD_DrawChar+0x7e>
 8000af8:	3307      	adds	r3, #7
 8000afa:	10db      	asrs	r3, r3, #3
 8000afc:	4619      	mov	r1, r3
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	fb01 f303 	mul.w	r3, r1, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
	  switch ((width + 7)/8)
 8000b08:	8a3b      	ldrh	r3, [r7, #16]
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da00      	bge.n	8000b12 <LCD_DrawChar+0x96>
 8000b10:	3307      	adds	r3, #7
 8000b12:	10db      	asrs	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d002      	beq.n	8000b1e <LCD_DrawChar+0xa2>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d004      	beq.n	8000b26 <LCD_DrawChar+0xaa>
 8000b1c:	e00c      	b.n	8000b38 <LCD_DrawChar+0xbc>
	  {
	  	  case 1:
	  		  line = pchar[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	61fb      	str	r3, [r7, #28]
	  		  break;
 8000b24:	e016      	b.n	8000b54 <LCD_DrawChar+0xd8>
	  	  case 2:
	  		  line = (pchar[0] << 8) | pchar[1];
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	3201      	adds	r2, #1
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61fb      	str	r3, [r7, #28]
	  		  break;
 8000b36:	e00d      	b.n	8000b54 <LCD_DrawChar+0xd8>
	  	  case 3:
	  	  default:
	  		  line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	4313      	orrs	r3, r2
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	3202      	adds	r2, #2
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61fb      	str	r3, [r7, #28]
	  		  break;
 8000b52:	bf00      	nop
	  }

	  for (uint32_t j = 0; j < width; j++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e023      	b.n	8000ba2 <LCD_DrawChar+0x126>
	  {
		  if (line & (1 << (width- j + offset- 1)))
 8000b5a:	8a3a      	ldrh	r2, [r7, #16]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4413      	add	r3, r2
 8000b64:	3b01      	subs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d009      	beq.n	8000b8a <LCD_DrawChar+0x10e>
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.TextColor);
 8000b76:	88fa      	ldrh	r2, [r7, #6]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	88b9      	ldrh	r1, [r7, #4]
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fefe 	bl	8000984 <LCD_DrawPixel>
 8000b88:	e008      	b.n	8000b9c <LCD_DrawChar+0x120>
		  }
		  else
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.BackColor);
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	88b9      	ldrh	r1, [r7, #4]
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LCD_DrawChar+0x14c>)
 8000b94:	6852      	ldr	r2, [r2, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fef4 	bl	8000984 <LCD_DrawPixel>
	  for (uint32_t j = 0; j < width; j++)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	8a3b      	ldrh	r3, [r7, #16]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3d7      	bcc.n	8000b5a <LCD_DrawChar+0xde>
		  }
	  }
	  y++;
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	3301      	adds	r3, #1
 8000bae:	80bb      	strh	r3, [r7, #4]
  for (uint32_t i = 0; i < height; i++)
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	8a7b      	ldrh	r3, [r7, #18]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d396      	bcc.n	8000aec <LCD_DrawChar+0x70>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000009c 	.word	0x2000009c
 8000bcc:	200000a8 	.word	0x200000a8

08000bd0 <LCD_DrawString>:

void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4603      	mov	r3, r0
 8000bdc:	81fb      	strh	r3, [r7, #14]
 8000bde:	460b      	mov	r3, r1
 8000be0:	81bb      	strh	r3, [r7, #12]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8000be6:	2301      	movs	r3, #1
 8000be8:	83fb      	strh	r3, [r7, #30]
 8000bea:	2300      	movs	r3, #0
 8000bec:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = Text;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	617b      	str	r3, [r7, #20]
	while (*ptr++) size++;
 8000bfa:	e002      	b.n	8000c02 <LCD_DrawString+0x32>
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	617a      	str	r2, [r7, #20]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f6      	bne.n	8000bfc <LCD_DrawString+0x2c>
	xsize = (X_SIZE/lcdProp.pFont->Width);
 8000c0e:	4b37      	ldr	r3, [pc, #220]	; (8000cec <LCD_DrawString+0x11c>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <LCD_DrawString+0x120>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	889b      	ldrh	r3, [r3, #4]
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	613b      	str	r3, [r7, #16]

	switch (Mode)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d002      	beq.n	8000c2c <LCD_DrawString+0x5c>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d00e      	beq.n	8000c48 <LCD_DrawString+0x78>
 8000c2a:	e01b      	b.n	8000c64 <LCD_DrawString+0x94>
	{
		case CENTER_MODE:
			ref_column = Xpos + ((xsize - size) * lcdProp.pFont->Width) / 2;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <LCD_DrawString+0x120>)
 8000c34:	6892      	ldr	r2, [r2, #8]
 8000c36:	8892      	ldrh	r2, [r2, #4]
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	085b      	lsrs	r3, r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	4413      	add	r3, r2
 8000c44:	83fb      	strh	r3, [r7, #30]
			break;
 8000c46:	e010      	b.n	8000c6a <LCD_DrawString+0x9a>
		case RIGHT_MODE:
			ref_column = - Xpos + ((xsize - size) * lcdProp.pFont->Width);
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <LCD_DrawString+0x120>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	889b      	ldrh	r3, [r3, #4]
 8000c56:	fb12 f303 	smulbb	r3, r2, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	83fb      	strh	r3, [r7, #30]
			break;
 8000c62:	e002      	b.n	8000c6a <LCD_DrawString+0x9a>
		case LEFT_MODE:
		default:
			ref_column = Xpos;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	83fb      	strh	r3, [r7, #30]
			break;
 8000c68:	bf00      	nop
	}

	if ((ref_column < 1) || (ref_column >= 0x8000))
 8000c6a:	8bfb      	ldrh	r3, [r7, #30]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <LCD_DrawString+0xa8>
 8000c70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da15      	bge.n	8000ca4 <LCD_DrawString+0xd4>
	{
		ref_column = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	83fb      	strh	r3, [r7, #30]
	}
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8000c7c:	e012      	b.n	8000ca4 <LCD_DrawString+0xd4>
	{
		LCD_DrawChar(ref_column, Ypos, *Text);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	89b9      	ldrh	r1, [r7, #12]
 8000c84:	8bfb      	ldrh	r3, [r7, #30]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fef8 	bl	8000a7c <LCD_DrawChar>
		ref_column += lcdProp.pFont->Width;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <LCD_DrawString+0x120>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	889a      	ldrh	r2, [r3, #4]
 8000c92:	8bfb      	ldrh	r3, [r7, #30]
 8000c94:	4413      	add	r3, r2
 8000c96:	83fb      	strh	r3, [r7, #30]
		Text++;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
		i++;
 8000c9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <LCD_DrawString+0x11c>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	8bbb      	ldrh	r3, [r7, #28]
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LCD_DrawString+0x120>)
 8000cbc:	6889      	ldr	r1, [r1, #8]
 8000cbe:	8889      	ldrh	r1, [r1, #4]
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	1ac3      	subs	r3, r0, r3
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <LCD_DrawString+0x120>)
 8000cca:	6889      	ldr	r1, [r1, #8]
 8000ccc:	8889      	ldrh	r1, [r1, #4]
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	bfac      	ite	ge
 8000cd2:	2301      	movge	r3, #1
 8000cd4:	2300      	movlt	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1ce      	bne.n	8000c7e <LCD_DrawString+0xae>
	}
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000020 	.word	0x20000020
 8000cf0:	2000009c 	.word	0x2000009c

08000cf4 <LCD_DrawImage>:


void LCD_DrawImage(uint16_t x_pos, uint16_t y_pos, uint16_t W, uint16_t H, const uint32_t* bitmap) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	4611      	mov	r1, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4623      	mov	r3, r4
 8000d04:	80fb      	strh	r3, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	80bb      	strh	r3, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	803b      	strh	r3, [r7, #0]

    uint16_t xp = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	81fb      	strh	r3, [r7, #14]
    uint16_t yp = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	81bb      	strh	r3, [r7, #12]
    uint32_t index = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
    for (xp = 0; xp < H; xp++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	81fb      	strh	r3, [r7, #14]
 8000d22:	e018      	b.n	8000d56 <LCD_DrawImage+0x62>
        for (yp = 0; yp < W; yp++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	81bb      	strh	r3, [r7, #12]
 8000d28:	e00e      	b.n	8000d48 <LCD_DrawImage+0x54>
        	LCD_DrawPixel(xp, yp, bitmap[index++]);
 8000d2a:	89f8      	ldrh	r0, [r7, #14]
 8000d2c:	89b9      	ldrh	r1, [r7, #12]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	6a3a      	ldr	r2, [r7, #32]
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f7ff fe21 	bl	8000984 <LCD_DrawPixel>
        for (yp = 0; yp < W; yp++) {
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	81bb      	strh	r3, [r7, #12]
 8000d48:	89ba      	ldrh	r2, [r7, #12]
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3ec      	bcc.n	8000d2a <LCD_DrawImage+0x36>
    for (xp = 0; xp < H; xp++) {
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	81fb      	strh	r3, [r7, #14]
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	883b      	ldrh	r3, [r7, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e2      	bcc.n	8000d24 <LCD_DrawImage+0x30>
        }
    }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd90      	pop	{r4, r7, pc}

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t *dma2d_in1;
	uint8_t *dma2d_in2;

	dma2d_in1 = (uint8_t *) ((uint32_t)(3) * LCD_FRAME_BUFFER);
 8000d6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8000d72:	623b      	str	r3, [r7, #32]
	dma2d_in2 = (uint8_t *) ((uint32_t)(4) * LCD_FRAME_BUFFER);
 8000d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d78:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f001 fab3 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f93b 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 fb37 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000d86:	f000 f9a7 	bl	80010d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d8a:	f000 fae3 	bl	8001354 <MX_FMC_Init>
  MX_I2C3_Init();
 8000d8e:	f000 f9eb 	bl	8001168 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000d92:	f000 faa9 	bl	80012e8 <MX_SPI5_Init>
  MX_LTDC_Init();
 8000d96:	f000 fa27 	bl	80011e8 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8000d9a:	4885      	ldr	r0, [pc, #532]	; (8000fb0 <main+0x248>)
 8000d9c:	f000 fbf6 	bl	800158c <SDRAM_init>
  LCD_PowerOn();
 8000da0:	f7ff fbf4 	bl	800058c <LCD_PowerOn>
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4983      	ldr	r1, [pc, #524]	; (8000fb4 <main+0x24c>)
 8000da8:	4883      	ldr	r0, [pc, #524]	; (8000fb8 <main+0x250>)
 8000daa:	f003 fb27 	bl	80043fc <HAL_LTDC_SetAddress>
  TP_Config();
 8000dae:	f001 f951 	bl	8002054 <TP_Config>

  LCD_FillScreen(0xFF0000);
 8000db2:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8000db6:	f7ff fd85 	bl	80008c4 <LCD_FillScreen>
  HAL_Delay(2000);
 8000dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dbe:	f001 fb03 	bl	80023c8 <HAL_Delay>
  LCD_FillScreen(0x0FF0FF);
 8000dc2:	487e      	ldr	r0, [pc, #504]	; (8000fbc <main+0x254>)
 8000dc4:	f7ff fd7e 	bl	80008c4 <LCD_FillScreen>
  HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f001 fafc 	bl	80023c8 <HAL_Delay>
  LCD_Test();
 8000dd0:	f7ff fda4 	bl	800091c <LCD_Test>
  HAL_Delay(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f001 faf6 	bl	80023c8 <HAL_Delay>
  LCD_FillScreen(LCD_COLOR_BLACK);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fd71 	bl	80008c4 <LCD_FillScreen>
  LCD_FontsInit();
 8000de2:	f7ff fe05 	bl	80009f0 <LCD_FontsInit>
  LCD_SetFont(&Font24);
 8000de6:	4876      	ldr	r0, [pc, #472]	; (8000fc0 <main+0x258>)
 8000de8:	f7ff fe18 	bl	8000a1c <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000dec:	4875      	ldr	r0, [pc, #468]	; (8000fc4 <main+0x25c>)
 8000dee:	f7ff fe25 	bl	8000a3c <LCD_SetTextColor>
  LCD_SetBackColor(LCD_COLOR_BLUE);
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	f7ff fe32 	bl	8000a5c <LCD_SetBackColor>
  LCD_DrawChar(10, 10, (uint8_t) 'T');
 8000df8:	2254      	movs	r2, #84	; 0x54
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f7ff fe3d 	bl	8000a7c <LCD_DrawChar>
  LCD_DrawChar(27, 10, (uint8_t) 'e');
 8000e02:	2265      	movs	r2, #101	; 0x65
 8000e04:	210a      	movs	r1, #10
 8000e06:	201b      	movs	r0, #27
 8000e08:	f7ff fe38 	bl	8000a7c <LCD_DrawChar>
  LCD_DrawChar(44, 10, (uint8_t) 's');
 8000e0c:	2273      	movs	r2, #115	; 0x73
 8000e0e:	210a      	movs	r1, #10
 8000e10:	202c      	movs	r0, #44	; 0x2c
 8000e12:	f7ff fe33 	bl	8000a7c <LCD_DrawChar>
  LCD_DrawChar(61, 10, (uint8_t) 't');
 8000e16:	2274      	movs	r2, #116	; 0x74
 8000e18:	210a      	movs	r1, #10
 8000e1a:	203d      	movs	r0, #61	; 0x3d
 8000e1c:	f7ff fe2e 	bl	8000a7c <LCD_DrawChar>

  LCD_SetFont(&Font16);
 8000e20:	4869      	ldr	r0, [pc, #420]	; (8000fc8 <main+0x260>)
 8000e22:	f7ff fdfb 	bl	8000a1c <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8000e26:	2080      	movs	r0, #128	; 0x80
 8000e28:	f7ff fe18 	bl	8000a5c <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8000e2c:	4867      	ldr	r0, [pc, #412]	; (8000fcc <main+0x264>)
 8000e2e:	f7ff fe05 	bl	8000a3c <LCD_SetTextColor>
  LCD_DrawString(10, 30, (uint8_t *)"Left 16", LEFT_MODE);
 8000e32:	2303      	movs	r3, #3
 8000e34:	4a66      	ldr	r2, [pc, #408]	; (8000fd0 <main+0x268>)
 8000e36:	211e      	movs	r1, #30
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f7ff fec9 	bl	8000bd0 <LCD_DrawString>

  LCD_SetFont(&Font8);
 8000e3e:	4865      	ldr	r0, [pc, #404]	; (8000fd4 <main+0x26c>)
 8000e40:	f7ff fdec 	bl	8000a1c <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKCYAN);
 8000e44:	f248 0080 	movw	r0, #32896	; 0x8080
 8000e48:	f7ff fe08 	bl	8000a5c <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000e4c:	f04f 10ff 	mov.w	r0, #16711935	; 0xff00ff
 8000e50:	f7ff fdf4 	bl	8000a3c <LCD_SetTextColor>
  LCD_DrawString(10, 50, (uint8_t *)"Right 8", RIGHT_MODE);
 8000e54:	2302      	movs	r3, #2
 8000e56:	4a60      	ldr	r2, [pc, #384]	; (8000fd8 <main+0x270>)
 8000e58:	2132      	movs	r1, #50	; 0x32
 8000e5a:	200a      	movs	r0, #10
 8000e5c:	f7ff feb8 	bl	8000bd0 <LCD_DrawString>

  LCD_SetFont(&Font8);
 8000e60:	485c      	ldr	r0, [pc, #368]	; (8000fd4 <main+0x26c>)
 8000e62:	f7ff fddb 	bl	8000a1c <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fdf8 	bl	8000a5c <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_CYAN);
 8000e6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e70:	f7ff fde4 	bl	8000a3c <LCD_SetTextColor>
  LCD_DrawString(10, 100, (uint8_t *)"Center 24", CENTER_MODE);
 8000e74:	2301      	movs	r3, #1
 8000e76:	4a59      	ldr	r2, [pc, #356]	; (8000fdc <main+0x274>)
 8000e78:	2164      	movs	r1, #100	; 0x64
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff fea8 	bl	8000bd0 <LCD_DrawString>

  LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8000e80:	f04f 1080 	mov.w	r0, #8388736	; 0x800080
 8000e84:	f7ff fdda 	bl	8000a3c <LCD_SetTextColor>
  LCD_DrawString(0, 200, (uint8_t *)"Left 24", LEFT_MODE);
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <main+0x278>)
 8000e8c:	21c8      	movs	r1, #200	; 0xc8
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fe9e 	bl	8000bd0 <LCD_DrawString>
  HAL_Delay(2000);
 8000e94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e98:	f001 fa96 	bl	80023c8 <HAL_Delay>
  LCD_SetFont(&Font20);
 8000e9c:	4851      	ldr	r0, [pc, #324]	; (8000fe4 <main+0x27c>)
 8000e9e:	f7ff fdbd 	bl	8000a1c <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000ea2:	4851      	ldr	r0, [pc, #324]	; (8000fe8 <main+0x280>)
 8000ea4:	f7ff fdca 	bl	8000a3c <LCD_SetTextColor>
  LCD_FillScreen(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fd0b 	bl	80008c4 <LCD_FillScreen>
  LCD_DrawImage(0, 0, 320, 240, image);
 8000eae:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <main+0x284>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	23f0      	movs	r3, #240	; 0xf0
 8000eb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff1a 	bl	8000cf4 <LCD_DrawImage>
  tp_state_t tp_state;
  char str[20] = {0};
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TP_GetState(&tp_state);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 f94f 	bl	8002178 <TP_GetState>
	  if (tp_state.touchDetected)
 8000eda:	7d3b      	ldrb	r3, [r7, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f7      	beq.n	8000ed0 <main+0x168>
	  {
		  sprintf(str, "x=%03d, y=%03d", tp_state.x, tp_state.y);
 8000ee0:	8afb      	ldrh	r3, [r7, #22]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	8b3b      	ldrh	r3, [r7, #24]
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	4941      	ldr	r1, [pc, #260]	; (8000ff0 <main+0x288>)
 8000eea:	f004 fefd 	bl	8005ce8 <siprintf>
//		  LCD_FillScreen(0x00);
		  LCD_DrawString(0,0, (uint8_t*)str, CENTER_MODE);
 8000eee:	463a      	mov	r2, r7
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fe6b 	bl	8000bd0 <LCD_DrawString>
//		  LCD_DrawCross(tp_state.x, tp_state.y, LCD_COLOR_WHITE);
			if(tp_state.x >=33 && tp_state.x<=202 && tp_state.y>=63 && tp_state.y<=115)
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d928      	bls.n	8000f52 <main+0x1ea>
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	2bca      	cmp	r3, #202	; 0xca
 8000f04:	d825      	bhi.n	8000f52 <main+0x1ea>
 8000f06:	8b3b      	ldrh	r3, [r7, #24]
 8000f08:	2b3e      	cmp	r3, #62	; 0x3e
 8000f0a:	d922      	bls.n	8000f52 <main+0x1ea>
 8000f0c:	8b3b      	ldrh	r3, [r7, #24]
 8000f0e:	2b73      	cmp	r3, #115	; 0x73
 8000f10:	d81f      	bhi.n	8000f52 <main+0x1ea>
			{
				if(v==1){
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10b      	bne.n	8000f32 <main+0x1ca>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4834      	ldr	r0, [pc, #208]	; (8000ff4 <main+0x28c>)
 8000f22:	f002 f8cd 	bl	80030c0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f001 fa4e 	bl	80023c8 <HAL_Delay>
				v=0;}
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(v==0){
 8000f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10b      	bne.n	8000f52 <main+0x1ea>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	482c      	ldr	r0, [pc, #176]	; (8000ff4 <main+0x28c>)
 8000f42:	f002 f8bd 	bl	80030c0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f001 fa3e 	bl	80023c8 <HAL_Delay>
				v=1;}
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			if(tp_state.x >=33 && tp_state.x<=202 && tp_state.y>=216 && tp_state.y<=265)
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d9bb      	bls.n	8000ed0 <main+0x168>
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2bca      	cmp	r3, #202	; 0xca
 8000f5c:	d8b8      	bhi.n	8000ed0 <main+0x168>
 8000f5e:	8b3b      	ldrh	r3, [r7, #24]
 8000f60:	2bd7      	cmp	r3, #215	; 0xd7
 8000f62:	d9b5      	bls.n	8000ed0 <main+0x168>
 8000f64:	8b3b      	ldrh	r3, [r7, #24]
 8000f66:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000f6a:	d2b1      	bcs.n	8000ed0 <main+0x168>
			{
				if(w==1){
 8000f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d10b      	bne.n	8000f8c <main+0x224>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <main+0x28c>)
 8000f7c:	f002 f8a0 	bl	80030c0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f001 fa21 	bl	80023c8 <HAL_Delay>
				w=0;}
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				if(w==0){
 8000f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d19d      	bne.n	8000ed0 <main+0x168>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <main+0x28c>)
 8000f9c:	f002 f890 	bl	80030c0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fa11 	bl	80023c8 <HAL_Delay>
				w=1;}
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  TP_GetState(&tp_state);
 8000fac:	e790      	b.n	8000ed0 <main+0x168>
 8000fae:	bf00      	nop
 8000fb0:	20000240 	.word	0x20000240
 8000fb4:	d0050000 	.word	0xd0050000
 8000fb8:	20000140 	.word	0x20000140
 8000fbc:	000ff0ff 	.word	0x000ff0ff
 8000fc0:	20000010 	.word	0x20000010
 8000fc4:	00ffff00 	.word	0x00ffff00
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	00ff8080 	.word	0x00ff8080
 8000fd0:	08006648 	.word	0x08006648
 8000fd4:	20000018 	.word	0x20000018
 8000fd8:	08006650 	.word	0x08006650
 8000fdc:	08006658 	.word	0x08006658
 8000fe0:	08006664 	.word	0x08006664
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	00ffa500 	.word	0x00ffa500
 8000fec:	08009ee4 	.word	0x08009ee4
 8000ff0:	0800666c 	.word	0x0800666c
 8000ff4:	40021800 	.word	0x40021800

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fe8e 	bl	8005d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <SystemClock_Config+0xd8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <SystemClock_Config+0xd8>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SystemClock_Config+0xd8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <SystemClock_Config+0xdc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <SystemClock_Config+0xdc>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <SystemClock_Config+0xdc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2310      	movs	r3, #16
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001068:	2308      	movs	r3, #8
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800106c:	23b4      	movs	r3, #180	; 0xb4
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001074:	2303      	movs	r3, #3
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fbdb 	bl	8004838 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 fa7a 	bl	8001580 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800108c:	f003 fb84 	bl	8004798 <HAL_PWREx_EnableOverDrive>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001096:	f000 fa73 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2302      	movs	r3, #2
 80010a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2105      	movs	r1, #5
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fe35 	bl	8004d28 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010c4:	f000 fa5c 	bl	8001580 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <MX_DMA2D_Init+0x8c>)
 80010e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB888;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_DMA2D_Init+0x88>)
 80010fe:	2201      	movs	r2, #1
 8001100:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_DMA2D_Init+0x88>)
 8001104:	2201      	movs	r2, #1
 8001106:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_DMA2D_Init+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_DMA2D_Init+0x88>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_DMA2D_Init+0x88>)
 8001116:	2201      	movs	r2, #1
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_DMA2D_Init+0x88>)
 800111c:	2201      	movs	r2, #1
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_DMA2D_Init+0x88>)
 8001122:	2200      	movs	r2, #0
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_DMA2D_Init+0x88>)
 8001128:	f001 fa83 	bl	8002632 <HAL_DMA2D_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001132:	f000 fa25 	bl	8001580 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_DMA2D_Init+0x88>)
 800113a:	f001 fce7 	bl	8002b0c <HAL_DMA2D_ConfigLayer>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001144:	f000 fa1c 	bl	8001580 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001148:	2101      	movs	r1, #1
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_DMA2D_Init+0x88>)
 800114c:	f001 fcde 	bl	8002b0c <HAL_DMA2D_ConfigLayer>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001156:	f000 fa13 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000ac 	.word	0x200000ac
 8001164:	4002b000 	.word	0x4002b000

08001168 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_I2C3_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <MX_I2C3_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_I2C3_Init+0x74>)
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <MX_I2C3_Init+0x7c>)
 8001176:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_I2C3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_I2C3_Init+0x74>)
 8001180:	2282      	movs	r2, #130	; 0x82
 8001182:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_I2C3_Init+0x74>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_I2C3_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C3_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_I2C3_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C3_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_I2C3_Init+0x74>)
 80011a6:	f001 ffa5 	bl	80030f4 <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 f9e6 	bl	8001580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <MX_I2C3_Init+0x74>)
 80011b8:	f002 ff96 	bl	80040e8 <HAL_I2CEx_ConfigAnalogFilter>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011c2:	f000 f9dd 	bl	8001580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C3_Init+0x74>)
 80011ca:	f002 ffc9 	bl	8004160 <HAL_I2CEx_ConfigDigitalFilter>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f9d4 	bl	8001580 <Error_Handler>
  }

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000ec 	.word	0x200000ec
 80011e0:	40005c00 	.word	0x40005c00
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2234      	movs	r2, #52	; 0x34
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fd97 	bl	8005d28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <MX_LTDC_Init+0xf8>)
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <MX_LTDC_Init+0xfc>)
 80011fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800121a:	2208      	movs	r2, #8
 800121c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001226:	221d      	movs	r2, #29
 8001228:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800122c:	2203      	movs	r2, #3
 800122e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001232:	f240 120d 	movw	r2, #269	; 0x10d
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800123a:	f240 1243 	movw	r2, #323	; 0x143
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001242:	f240 1217 	movw	r2, #279	; 0x117
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800124a:	f240 1247 	movw	r2, #327	; 0x147
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_LTDC_Init+0xf8>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001268:	481d      	ldr	r0, [pc, #116]	; (80012e0 <MX_LTDC_Init+0xf8>)
 800126a:	f002 ffb9 	bl	80041e0 <HAL_LTDC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 f984 	bl	8001580 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800127c:	23f0      	movs	r3, #240	; 0xf0
 800127e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001284:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001288:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800128e:	23ff      	movs	r3, #255	; 0xff
 8001290:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800129c:	2305      	movs	r3, #5
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80012a4:	23f0      	movs	r3, #240	; 0xf0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80012a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_LTDC_Init+0xf8>)
 80012c8:	f003 f85a 	bl	8004380 <HAL_LTDC_ConfigLayer>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80012d2:	f000 f955 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3738      	adds	r7, #56	; 0x38
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000140 	.word	0x20000140
 80012e4:	40016800 	.word	0x40016800

080012e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SPI5_Init+0x64>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <MX_SPI5_Init+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_SPI5_Init+0x64>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SPI5_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SPI5_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_SPI5_Init+0x64>)
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SPI5_Init+0x64>)
 800131c:	2218      	movs	r2, #24
 800131e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SPI5_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SPI5_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SPI5_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SPI5_Init+0x64>)
 8001334:	220a      	movs	r2, #10
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SPI5_Init+0x64>)
 800133a:	f004 f912 	bl	8005562 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001344:	f000 f91c 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001e8 	.word	0x200001e8
 8001350:	40015000 	.word	0x40015000

08001354 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_FMC_Init+0x98>)
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <MX_FMC_Init+0x9c>)
 8001370:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_FMC_Init+0x98>)
 8001374:	2201      	movs	r2, #1
 8001376:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_FMC_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_FMC_Init+0x98>)
 8001380:	2204      	movs	r2, #4
 8001382:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_FMC_Init+0x98>)
 8001386:	2210      	movs	r2, #16
 8001388:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_FMC_Init+0x98>)
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_FMC_Init+0x98>)
 8001392:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001396:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_FMC_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_FMC_Init+0x98>)
 80013a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_FMC_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_FMC_Init+0x98>)
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013bc:	2304      	movs	r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013c0:	2307      	movs	r3, #7
 80013c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013c4:	2303      	movs	r3, #3
 80013c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_FMC_Init+0x98>)
 80013d6:	f004 f833 	bl	8005440 <HAL_SDRAM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80013e0:	f000 f8ce 	bl	8001580 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000240 	.word	0x20000240
 80013f0:	a0000140 	.word	0xa0000140

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	4b57      	ldr	r3, [pc, #348]	; (800156c <MX_GPIO_Init+0x178>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a56      	ldr	r2, [pc, #344]	; (800156c <MX_GPIO_Init+0x178>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <MX_GPIO_Init+0x178>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <MX_GPIO_Init+0x178>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a4f      	ldr	r2, [pc, #316]	; (800156c <MX_GPIO_Init+0x178>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <MX_GPIO_Init+0x178>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <MX_GPIO_Init+0x178>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a48      	ldr	r2, [pc, #288]	; (800156c <MX_GPIO_Init+0x178>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_GPIO_Init+0x178>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <MX_GPIO_Init+0x178>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a41      	ldr	r2, [pc, #260]	; (800156c <MX_GPIO_Init+0x178>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <MX_GPIO_Init+0x178>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_GPIO_Init+0x178>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3a      	ldr	r2, [pc, #232]	; (800156c <MX_GPIO_Init+0x178>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <MX_GPIO_Init+0x178>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <MX_GPIO_Init+0x178>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <MX_GPIO_Init+0x178>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <MX_GPIO_Init+0x178>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <MX_GPIO_Init+0x178>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2c      	ldr	r2, [pc, #176]	; (800156c <MX_GPIO_Init+0x178>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_GPIO_Init+0x178>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2104      	movs	r1, #4
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <MX_GPIO_Init+0x17c>)
 80014d4:	f001 fdf4 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4825      	ldr	r0, [pc, #148]	; (8001574 <MX_GPIO_Init+0x180>)
 80014e0:	f001 fdee 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014ea:	4823      	ldr	r0, [pc, #140]	; (8001578 <MX_GPIO_Init+0x184>)
 80014ec:	f001 fde8 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80014f0:	2304      	movs	r3, #4
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	481a      	ldr	r0, [pc, #104]	; (8001570 <MX_GPIO_Init+0x17c>)
 8001508:	f001 fc2e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_GPIO_Init+0x180>)
 8001526:	f001 fc1f 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 800152a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <MX_GPIO_Init+0x188>)
 8001540:	f001 fc12 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001544:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_GPIO_Init+0x184>)
 800155e:	f001 fc03 	bl	8002d68 <HAL_GPIO_Init>

}
 8001562:	bf00      	nop
 8001564:	3730      	adds	r7, #48	; 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021800 	.word	0x40021800
 800157c:	40020000 	.word	0x40020000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <SDRAM_init+0xcc>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <SDRAM_init+0xcc>)
 80015a0:	2208      	movs	r2, #8
 80015a2:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <SDRAM_init+0xcc>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <SDRAM_init+0xcc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80015b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b4:	4928      	ldr	r1, [pc, #160]	; (8001658 <SDRAM_init+0xcc>)
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f003 ff76 	bl	80054a8 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f000 ff03 	bl	80023c8 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <SDRAM_init+0xcc>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <SDRAM_init+0xcc>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <SDRAM_init+0xcc>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <SDRAM_init+0xcc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	491e      	ldr	r1, [pc, #120]	; (8001658 <SDRAM_init+0xcc>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f003 ff61 	bl	80054a8 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80015e6:	200a      	movs	r0, #10
 80015e8:	f000 feee 	bl	80023c8 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <SDRAM_init+0xcc>)
 80015ee:	2203      	movs	r2, #3
 80015f0:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <SDRAM_init+0xcc>)
 80015f4:	2208      	movs	r2, #8
 80015f6:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <SDRAM_init+0xcc>)
 80015fa:	2204      	movs	r2, #4
 80015fc:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <SDRAM_init+0xcc>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001608:	4913      	ldr	r1, [pc, #76]	; (8001658 <SDRAM_init+0xcc>)
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f003 ff4c 	bl	80054a8 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8001610:	200a      	movs	r0, #10
 8001612:	f000 fed9 	bl	80023c8 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8001616:	f240 2331 	movw	r3, #561	; 0x231
 800161a:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <SDRAM_init+0xcc>)
 800161e:	2204      	movs	r2, #4
 8001620:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <SDRAM_init+0xcc>)
 8001624:	2208      	movs	r2, #8
 8001626:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <SDRAM_init+0xcc>)
 800162a:	2201      	movs	r2, #1
 800162c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <SDRAM_init+0xcc>)
 8001632:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <SDRAM_init+0xcc>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f003 ff34 	bl	80054a8 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f000 fec1 	bl	80023c8 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8001646:	f240 516a 	movw	r1, #1386	; 0x56a
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f003 ff61 	bl	8005512 <HAL_SDRAM_ProgramRefreshRate>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000274 	.word	0x20000274

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_DMA2D_MspInit+0x48>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d115      	bne.n	80016ea <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_DMA2D_MspInit+0x4c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_DMA2D_MspInit+0x4c>)
 80016c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_DMA2D_MspInit+0x4c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	205a      	movs	r0, #90	; 0x5a
 80016e0:	f000 ff71 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80016e4:	205a      	movs	r0, #90	; 0x5a
 80016e6:	f000 ff8a 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	4002b000 	.word	0x4002b000
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <HAL_I2C_MspInit+0xc4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d14b      	bne.n	80017b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001768:	2304      	movs	r3, #4
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4815      	ldr	r0, [pc, #84]	; (80017c8 <HAL_I2C_MspInit+0xcc>)
 8001774:	f001 faf8 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177e:	2312      	movs	r3, #18
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800178a:	2304      	movs	r3, #4
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <HAL_I2C_MspInit+0xd0>)
 8001796:	f001 fae7 	bl	8002d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 80017a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_I2C_MspInit+0xc8>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40005c00 	.word	0x40005c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40021c00 	.word	0x40021c00
 80017cc:	40020000 	.word	0x40020000

080017d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b09c      	sub	sp, #112	; 0x70
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	2230      	movs	r2, #48	; 0x30
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fa99 	bl	8005d28 <memset>
  if(hltdc->Instance==LTDC)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4aa0      	ldr	r2, [pc, #640]	; (8001a7c <HAL_LTDC_MspInit+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f040 8138 	bne.w	8001a72 <HAL_LTDC_MspInit+0x2a2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001802:	2308      	movs	r3, #8
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001806:	233c      	movs	r3, #60	; 0x3c
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800180e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001812:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001818:	4618      	mov	r0, r3
 800181a:	f003 fc51 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001824:	f7ff feac 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
 800182c:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	4a93      	ldr	r2, [pc, #588]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001836:	6453      	str	r3, [r2, #68]	; 0x44
 8001838:	4b91      	ldr	r3, [pc, #580]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
 8001848:	4b8d      	ldr	r3, [pc, #564]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a8c      	ldr	r2, [pc, #560]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b8a      	ldr	r3, [pc, #552]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	4b86      	ldr	r3, [pc, #536]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a85      	ldr	r2, [pc, #532]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a70      	ldr	r2, [pc, #448]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b6e      	ldr	r3, [pc, #440]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a62      	ldr	r2, [pc, #392]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a5b      	ldr	r2, [pc, #364]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_LTDC_MspInit+0x2b0>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2;
 8001924:	f240 6304 	movw	r3, #1540	; 0x604
 8001928:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001936:	230e      	movs	r3, #14
 8001938:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800193a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800193e:	4619      	mov	r1, r3
 8001940:	4850      	ldr	r0, [pc, #320]	; (8001a84 <HAL_LTDC_MspInit+0x2b4>)
 8001942:	f001 fa11 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001958:	230e      	movs	r3, #14
 800195a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800195c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001960:	4619      	mov	r1, r3
 8001962:	4849      	ldr	r0, [pc, #292]	; (8001a88 <HAL_LTDC_MspInit+0x2b8>)
 8001964:	f001 fa00 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001968:	2348      	movs	r3, #72	; 0x48
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001978:	230e      	movs	r3, #14
 800197a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001980:	4619      	mov	r1, r3
 8001982:	4842      	ldr	r0, [pc, #264]	; (8001a8c <HAL_LTDC_MspInit+0x2bc>)
 8001984:	f001 f9f0 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001988:	2303      	movs	r3, #3
 800198a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001998:	2309      	movs	r3, #9
 800199a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019a0:	4619      	mov	r1, r3
 80019a2:	483b      	ldr	r0, [pc, #236]	; (8001a90 <HAL_LTDC_MspInit+0x2c0>)
 80019a4:	f001 f9e0 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80019a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80019ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019ba:	230e      	movs	r3, #14
 80019bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4832      	ldr	r0, [pc, #200]	; (8001a90 <HAL_LTDC_MspInit+0x2c0>)
 80019c6:	f001 f9cf 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 80019ca:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80019ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019dc:	230e      	movs	r3, #14
 80019de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019e4:	4619      	mov	r1, r3
 80019e6:	482b      	ldr	r0, [pc, #172]	; (8001a94 <HAL_LTDC_MspInit+0x2c4>)
 80019e8:	f001 f9be 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80019ec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019fe:	230e      	movs	r3, #14
 8001a00:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4823      	ldr	r0, [pc, #140]	; (8001a98 <HAL_LTDC_MspInit+0x2c8>)
 8001a0a:	f001 f9ad 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001a0e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001a12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a20:	230e      	movs	r3, #14
 8001a22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481c      	ldr	r0, [pc, #112]	; (8001a9c <HAL_LTDC_MspInit+0x2cc>)
 8001a2c:	f001 f99c 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a30:	2340      	movs	r3, #64	; 0x40
 8001a32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a40:	230e      	movs	r3, #14
 8001a42:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <HAL_LTDC_MspInit+0x2d0>)
 8001a4c:	f001 f98c 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a62:	2309      	movs	r3, #9
 8001a64:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <HAL_LTDC_MspInit+0x2c8>)
 8001a6e:	f001 f97b 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3770      	adds	r7, #112	; 0x70
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40016800 	.word	0x40016800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40021c00 	.word	0x40021c00
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00

08001aa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_SPI_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12c      	bne.n	8001b20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001aec:	f043 0320 	orr.w	r3, r3, #32
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_SPI_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001afe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b10:	2305      	movs	r3, #5
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_SPI_MspInit+0x8c>)
 8001b1c:	f001 f924 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40015000 	.word	0x40015000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021400 	.word	0x40021400

08001b34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b48:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_FMC_MspInit+0x104>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d16f      	bne.n	8001c30 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_FMC_MspInit+0x104>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_FMC_MspInit+0x108>)
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <HAL_FMC_MspInit+0x108>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_FMC_MspInit+0x108>)
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b72:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b84:	230c      	movs	r3, #12
 8001b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	482c      	ldr	r0, [pc, #176]	; (8001c40 <HAL_FMC_MspInit+0x10c>)
 8001b8e:	f001 f8eb 	bl	8002d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b92:	2301      	movs	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4826      	ldr	r0, [pc, #152]	; (8001c44 <HAL_FMC_MspInit+0x110>)
 8001bac:	f001 f8dc 	bl	8002d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001bb0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001bb4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <HAL_FMC_MspInit+0x114>)
 8001bcc:	f001 f8cc 	bl	8002d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001bd0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001bd4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be2:	230c      	movs	r3, #12
 8001be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <HAL_FMC_MspInit+0x118>)
 8001bec:	f001 f8bc 	bl	8002d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c00:	230c      	movs	r3, #12
 8001c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <HAL_FMC_MspInit+0x11c>)
 8001c0a:	f001 f8ad 	bl	8002d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001c0e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c20:	230c      	movs	r3, #12
 8001c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <HAL_FMC_MspInit+0x120>)
 8001c2a:	f001 f89d 	bl	8002d68 <HAL_GPIO_Init>
 8001c2e:	e000      	b.n	8001c32 <HAL_FMC_MspInit+0xfe>
    return;
 8001c30:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000284 	.word	0x20000284
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021400 	.word	0x40021400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021c00 	.word	0x40021c00
 8001c54:	40020c00 	.word	0x40020c00

08001c58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c60:	f7ff ff68 	bl	8001b34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 fb66 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2D_IRQHandler+0x10>)
 8001cc6:	f000 fe11 	bl	80028ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000ac 	.word	0x200000ac

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f004 f818 	bl	8005d38 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20030000 	.word	0x20030000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000288 	.word	0x20000288
 8001d3c:	200003e0 	.word	0x200003e0

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8001d72:	2302      	movs	r3, #2
 8001d74:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8001d76:	1d3a      	adds	r2, r7, #4
 8001d78:	2364      	movs	r3, #100	; 0x64
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	2182      	movs	r1, #130	; 0x82
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <touchReset+0x4c>)
 8001d82:	f001 fafb 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001d86:	2014      	movs	r0, #20
 8001d88:	f000 fb1e 	bl	80023c8 <HAL_Delay>
	sendBuf[1] = 0x00;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8001d90:	1d3a      	adds	r2, r7, #4
 8001d92:	2364      	movs	r3, #100	; 0x64
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2302      	movs	r3, #2
 8001d98:	2182      	movs	r1, #130	; 0x82
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <touchReset+0x4c>)
 8001d9c:	f001 faee 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001da0:	2014      	movs	r0, #20
 8001da2:	f000 fb11 	bl	80023c8 <HAL_Delay>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200000ec 	.word	0x200000ec

08001db4 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8001dc8:	2300      	movs	r3, #0
 8001dca:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2182      	movs	r1, #130	; 0x82
 8001ddc:	4817      	ldr	r0, [pc, #92]	; (8001e3c <fnctCmd+0x88>)
 8001dde:	f001 facd 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8001de2:	f107 020c 	add.w	r2, r7, #12
 8001de6:	2364      	movs	r3, #100	; 0x64
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2301      	movs	r3, #1
 8001dec:	2182      	movs	r1, #130	; 0x82
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <fnctCmd+0x88>)
 8001df0:	f001 fbc2 	bl	8003578 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	b25a      	sxtb	r2, r3
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e003      	b.n	8001e1a <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8001e22:	f107 020c 	add.w	r2, r7, #12
 8001e26:	2364      	movs	r3, #100	; 0x64
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	2182      	movs	r1, #130	; 0x82
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <fnctCmd+0x88>)
 8001e30:	f001 faa4 	bl	800337c <HAL_I2C_Master_Transmit>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200000ec 	.word	0x200000ec

08001e40 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	4603      	mov	r3, r0
 8001e48:	460a      	mov	r2, r1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8001e54:	2300      	movs	r3, #0
 8001e56:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8001e58:	2317      	movs	r3, #23
 8001e5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8001e5c:	f107 020c 	add.w	r2, r7, #12
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	2182      	movs	r1, #130	; 0x82
 8001e68:	4817      	ldr	r0, [pc, #92]	; (8001ec8 <ioAFConfig+0x88>)
 8001e6a:	f001 fa87 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8001e6e:	f107 020c 	add.w	r2, r7, #12
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	2182      	movs	r1, #130	; 0x82
 8001e7a:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <ioAFConfig+0x88>)
 8001e7c:	f001 fb7c 	bl	8003578 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8001e80:	7b3b      	ldrb	r3, [r7, #12]
 8001e82:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e008      	b.n	8001ea6 <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8001ea6:	2317      	movs	r3, #23
 8001ea8:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	2364      	movs	r3, #100	; 0x64
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	2182      	movs	r1, #130	; 0x82
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ioAFConfig+0x88>)
 8001ebc:	f001 fa5e 	bl	800337c <HAL_I2C_Master_Transmit>
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200000ec 	.word	0x200000ec

08001ecc <readX>:

static void readX(uint16_t *x)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 8001ed4:	234d      	movs	r3, #77	; 0x4d
 8001ed6:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8001ed8:	f107 0208 	add.w	r2, r7, #8
 8001edc:	2364      	movs	r3, #100	; 0x64
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	2182      	movs	r1, #130	; 0x82
 8001ee4:	481f      	ldr	r0, [pc, #124]	; (8001f64 <readX+0x98>)
 8001ee6:	f001 fa49 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8001eea:	f107 0208 	add.w	r2, r7, #8
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	2182      	movs	r1, #130	; 0x82
 8001ef6:	481b      	ldr	r0, [pc, #108]	; (8001f64 <readX+0x98>)
 8001ef8:	f001 fb3e 	bl	8003578 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 8001efc:	7a3b      	ldrb	r3, [r7, #8]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	7a7a      	ldrb	r2, [r7, #9]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	dc05      	bgt.n	8001f1c <readX+0x50>
	{
		_x = 3870 - _x;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8001f16:	330e      	adds	r3, #14
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e004      	b.n	8001f26 <readX+0x5a>
	}
	else
	{
		_x = 3800 - _x;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8001f22:	3308      	adds	r3, #8
 8001f24:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <readX+0x9c>)
 8001f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f2e:	441a      	add	r2, r3
 8001f30:	10d2      	asrs	r2, r2, #3
 8001f32:	17db      	asrs	r3, r3, #31
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <readX+0x80>
	{
		*x = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8001f4a:	e006      	b.n	8001f5a <readX+0x8e>
	else if (*x > 240)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2bf0      	cmp	r3, #240	; 0xf0
 8001f52:	d902      	bls.n	8001f5a <readX+0x8e>
		*x = 239;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	22ef      	movs	r2, #239	; 0xef
 8001f58:	801a      	strh	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200000ec 	.word	0x200000ec
 8001f68:	88888889 	.word	0x88888889

08001f6c <readY>:

static void readY(uint16_t *y)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 8001f74:	234f      	movs	r3, #79	; 0x4f
 8001f76:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8001f78:	f107 0208 	add.w	r2, r7, #8
 8001f7c:	2364      	movs	r3, #100	; 0x64
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2301      	movs	r3, #1
 8001f82:	2182      	movs	r1, #130	; 0x82
 8001f84:	4819      	ldr	r0, [pc, #100]	; (8001fec <readY+0x80>)
 8001f86:	f001 f9f9 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8001f8a:	f107 0208 	add.w	r2, r7, #8
 8001f8e:	2364      	movs	r3, #100	; 0x64
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2302      	movs	r3, #2
 8001f94:	2182      	movs	r1, #130	; 0x82
 8001f96:	4815      	ldr	r0, [pc, #84]	; (8001fec <readY+0x80>)
 8001f98:	f001 faee 	bl	8003578 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 8001f9c:	7a3b      	ldrb	r3, [r7, #8]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	7a7a      	ldrb	r2, [r7, #9]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fac:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <readY+0x84>)
 8001fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb6:	1052      	asrs	r2, r2, #1
 8001fb8:	17db      	asrs	r3, r3, #31
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <readY+0x66>
	{
		*y = 0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 8001fd0:	e008      	b.n	8001fe4 <readY+0x78>
	else if (*y > 320)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001fda:	d903      	bls.n	8001fe4 <readY+0x78>
		*y = 319;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f240 123f 	movw	r2, #319	; 0x13f
 8001fe2:	801a      	strh	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200000ec 	.word	0x200000ec
 8001ff0:	2e8ba2e9 	.word	0x2e8ba2e9

08001ff4 <readZ>:

static void readZ(uint16_t *z)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 8001ffc:	2351      	movs	r3, #81	; 0x51
 8001ffe:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8002000:	f107 020c 	add.w	r2, r7, #12
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	2182      	movs	r1, #130	; 0x82
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <readZ+0x5c>)
 800200e:	f001 f9b5 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2302      	movs	r3, #2
 800201c:	2182      	movs	r1, #130	; 0x82
 800201e:	480c      	ldr	r0, [pc, #48]	; (8002050 <readZ+0x5c>)
 8002020:	f001 faaa 	bl	8003578 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 8002024:	7b3b      	ldrb	r3, [r7, #12]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b21a      	sxth	r2, r3
 800202a:	7b7b      	ldrb	r3, [r7, #13]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <readZ+0x52>
	{
		*z = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
	}
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200000ec 	.word	0x200000ec

08002054 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af02      	add	r7, sp, #8
	touchReset();
 800205a:	f7ff fe83 	bl	8001d64 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800205e:	2101      	movs	r1, #1
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fea7 	bl	8001db4 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8002066:	2101      	movs	r1, #1
 8002068:	2002      	movs	r0, #2
 800206a:	f7ff fea3 	bl	8001db4 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800206e:	f644 1320 	movw	r3, #18720	; 0x4920
 8002072:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8002074:	1d3a      	adds	r2, r7, #4
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2302      	movs	r3, #2
 800207c:	2182      	movs	r1, #130	; 0x82
 800207e:	483d      	ldr	r0, [pc, #244]	; (8002174 <TP_Config+0x120>)
 8002080:	f001 f97c 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8002084:	2014      	movs	r0, #20
 8002086:	f000 f99f 	bl	80023c8 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 800208a:	2321      	movs	r3, #33	; 0x21
 800208c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800208e:	2301      	movs	r3, #1
 8002090:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8002092:	1d3a      	adds	r2, r7, #4
 8002094:	2364      	movs	r3, #100	; 0x64
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2302      	movs	r3, #2
 800209a:	2182      	movs	r1, #130	; 0x82
 800209c:	4835      	ldr	r0, [pc, #212]	; (8002174 <TP_Config+0x120>)
 800209e:	f001 f96d 	bl	800337c <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 80020a2:	2100      	movs	r1, #0
 80020a4:	201e      	movs	r0, #30
 80020a6:	f7ff fecb 	bl	8001e40 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 80020aa:	2341      	movs	r3, #65	; 0x41
 80020ac:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 80020ae:	239a      	movs	r3, #154	; 0x9a
 80020b0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80020b2:	1d3a      	adds	r2, r7, #4
 80020b4:	2364      	movs	r3, #100	; 0x64
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2302      	movs	r3, #2
 80020ba:	2182      	movs	r1, #130	; 0x82
 80020bc:	482d      	ldr	r0, [pc, #180]	; (8002174 <TP_Config+0x120>)
 80020be:	f001 f95d 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 80020c2:	234a      	movs	r3, #74	; 0x4a
 80020c4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80020c6:	2301      	movs	r3, #1
 80020c8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80020ca:	1d3a      	adds	r2, r7, #4
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2302      	movs	r3, #2
 80020d2:	2182      	movs	r1, #130	; 0x82
 80020d4:	4827      	ldr	r0, [pc, #156]	; (8002174 <TP_Config+0x120>)
 80020d6:	f001 f951 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80020da:	234b      	movs	r3, #75	; 0x4b
 80020dc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80020de:	2301      	movs	r3, #1
 80020e0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80020e2:	1d3a      	adds	r2, r7, #4
 80020e4:	2364      	movs	r3, #100	; 0x64
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2302      	movs	r3, #2
 80020ea:	2182      	movs	r1, #130	; 0x82
 80020ec:	4821      	ldr	r0, [pc, #132]	; (8002174 <TP_Config+0x120>)
 80020ee:	f001 f945 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80020f2:	234b      	movs	r3, #75	; 0x4b
 80020f4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80020fa:	1d3a      	adds	r2, r7, #4
 80020fc:	2364      	movs	r3, #100	; 0x64
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2302      	movs	r3, #2
 8002102:	2182      	movs	r1, #130	; 0x82
 8002104:	481b      	ldr	r0, [pc, #108]	; (8002174 <TP_Config+0x120>)
 8002106:	f001 f939 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 800210a:	2356      	movs	r3, #86	; 0x56
 800210c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800210e:	2301      	movs	r3, #1
 8002110:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8002112:	1d3a      	adds	r2, r7, #4
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2302      	movs	r3, #2
 800211a:	2182      	movs	r1, #130	; 0x82
 800211c:	4815      	ldr	r0, [pc, #84]	; (8002174 <TP_Config+0x120>)
 800211e:	f001 f92d 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8002122:	2358      	movs	r3, #88	; 0x58
 8002124:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8002126:	2301      	movs	r3, #1
 8002128:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800212a:	1d3a      	adds	r2, r7, #4
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2302      	movs	r3, #2
 8002132:	2182      	movs	r1, #130	; 0x82
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <TP_Config+0x120>)
 8002136:	f001 f921 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 800213e:	2303      	movs	r3, #3
 8002140:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8002142:	1d3a      	adds	r2, r7, #4
 8002144:	2364      	movs	r3, #100	; 0x64
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2302      	movs	r3, #2
 800214a:	2182      	movs	r1, #130	; 0x82
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <TP_Config+0x120>)
 800214e:	f001 f915 	bl	800337c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8002152:	230b      	movs	r3, #11
 8002154:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8002156:	23ff      	movs	r3, #255	; 0xff
 8002158:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800215a:	1d3a      	adds	r2, r7, #4
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2302      	movs	r3, #2
 8002162:	2182      	movs	r1, #130	; 0x82
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <TP_Config+0x120>)
 8002166:	f001 f909 	bl	800337c <HAL_I2C_Master_Transmit>

}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200000ec 	.word	0x200000ec

08002178 <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	2364      	movs	r3, #100	; 0x64
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	2182      	movs	r1, #130	; 0x82
 8002190:	483b      	ldr	r0, [pc, #236]	; (8002280 <TP_GetState+0x108>)
 8002192:	f001 f8f3 	bl	800337c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	2364      	movs	r3, #100	; 0x64
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	2182      	movs	r1, #130	; 0x82
 80021a2:	4837      	ldr	r0, [pc, #220]	; (8002280 <TP_GetState+0x108>)
 80021a4:	f001 f9e8 	bl	8003578 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 80021a8:	7b3b      	ldrb	r3, [r7, #12]
 80021aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d039      	beq.n	8002230 <TP_GetState+0xb8>
	{
		readX(&x);
 80021bc:	f107 0312 	add.w	r3, r7, #18
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe83 	bl	8001ecc <readX>
		readY(&y);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fece 	bl	8001f6c <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 80021d0:	8a7a      	ldrh	r2, [r7, #18]
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <TP_GetState+0x10c>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d905      	bls.n	80021e6 <TP_GetState+0x6e>
 80021da:	8a7a      	ldrh	r2, [r7, #18]
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <TP_GetState+0x10c>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	e004      	b.n	80021f0 <TP_GetState+0x78>
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <TP_GetState+0x10c>)
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	8a7b      	ldrh	r3, [r7, #18]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 80021f2:	8a3a      	ldrh	r2, [r7, #16]
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <TP_GetState+0x110>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d905      	bls.n	8002208 <TP_GetState+0x90>
 80021fc:	8a3a      	ldrh	r2, [r7, #16]
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <TP_GetState+0x110>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	e004      	b.n	8002212 <TP_GetState+0x9a>
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <TP_GetState+0x110>)
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	8a3b      	ldrh	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 8002214:	8afa      	ldrh	r2, [r7, #22]
 8002216:	8abb      	ldrh	r3, [r7, #20]
 8002218:	4413      	add	r3, r2
 800221a:	2b05      	cmp	r3, #5
 800221c:	dd05      	ble.n	800222a <TP_GetState+0xb2>
		{
			_x = x;
 800221e:	8a7a      	ldrh	r2, [r7, #18]
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <TP_GetState+0x10c>)
 8002222:	801a      	strh	r2, [r3, #0]
			_y = y;
 8002224:	8a3a      	ldrh	r2, [r7, #16]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <TP_GetState+0x110>)
 8002228:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 800222a:	4818      	ldr	r0, [pc, #96]	; (800228c <TP_GetState+0x114>)
 800222c:	f7ff fee2 	bl	8001ff4 <readZ>
	}

	state->x = _x;
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <TP_GetState+0x10c>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <TP_GetState+0x110>)
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <TP_GetState+0x114>)
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8002248:	234b      	movs	r3, #75	; 0x4b
 800224a:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 800224c:	2301      	movs	r3, #1
 800224e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	2364      	movs	r3, #100	; 0x64
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2302      	movs	r3, #2
 800225a:	2182      	movs	r1, #130	; 0x82
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <TP_GetState+0x108>)
 800225e:	f001 f88d 	bl	800337c <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	2364      	movs	r3, #100	; 0x64
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2302      	movs	r3, #2
 8002270:	2182      	movs	r1, #130	; 0x82
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <TP_GetState+0x108>)
 8002274:	f001 f882 	bl	800337c <HAL_I2C_Master_Transmit>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200000ec 	.word	0x200000ec
 8002284:	2000028c 	.word	0x2000028c
 8002288:	2000028e 	.word	0x2000028e
 800228c:	20000290 	.word	0x20000290

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002294:	f7ff fd54 	bl	8001d40 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	; (80022d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	; (80022dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022be:	f003 fd41 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe fd51 	bl	8000d68 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80022d4:	08054f40 	.word	0x08054f40
  ldr r2, =_sbss
 80022d8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80022dc:	200003e0 	.word	0x200003e0

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_Init+0x40>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_Init+0x40>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x40>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f94f 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff f9a0 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f967 	bl	800261a <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f000 f92f 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000024 	.word	0x20000024
 8002380:	2000002c 	.word	0x2000002c
 8002384:	20000028 	.word	0x20000028

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000002c 	.word	0x2000002c
 80023ac:	20000294 	.word	0x20000294

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000294 	.word	0x20000294

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000002c 	.word	0x2000002c

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	; (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff3e 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff31 	bl	8002474 <__NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffa2 	bl	800256c <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e03b      	b.n	80026bc <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff f827 	bl	80016ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	f023 0107 	bic.w	r1, r3, #7
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68d1      	ldr	r1, [r2, #12]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_DMA2D_Start+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e018      	b.n	8002712 <HAL_DMA2D_Start+0x4e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa98 	bl	8002c30 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d056      	beq.n	80027e4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002736:	f7ff fe3b 	bl	80023b0 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800273c:	e04b      	b.n	80027d6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	f043 0202 	orr.w	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2221      	movs	r2, #33	; 0x21
 8002782:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2204      	movs	r2, #4
 8002788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0a5      	b.n	80028e4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d01a      	beq.n	80027d6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a0:	f7ff fe06 	bl	80023b0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d302      	bcc.n	80027b6 <HAL_DMA2D_PollForTransfer+0x9c>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e086      	b.n	80028e4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ac      	beq.n	800273e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d061      	beq.n	80028ca <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002806:	f7ff fdd3 	bl	80023b0 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800280c:	e056      	b.n	80028bc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02e      	beq.n	800287e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2229      	movs	r2, #41	; 0x29
 8002868:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e032      	b.n	80028e4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d01a      	beq.n	80028bc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7ff fd93 	bl	80023b0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <HAL_DMA2D_PollForTransfer+0x182>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e013      	b.n	80028e4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0a1      	beq.n	800280e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2212      	movs	r2, #18
 80028d0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d026      	beq.n	800295c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d021      	beq.n	800295c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002926:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2204      	movs	r2, #4
 8002940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d026      	beq.n	80029b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2220      	movs	r2, #32
 8002986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2204      	movs	r2, #4
 8002998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d026      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	f043 0204 	orr.w	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2204      	movs	r2, #4
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d013      	beq.n	8002a3e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2204      	movs	r2, #4
 8002a36:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f853 	bl	8002ae4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d024      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01f      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01f      	beq.n	8002adc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01a      	beq.n	8002adc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f80e 	bl	8002af8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA2D_ConfigLayer+0x20>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e079      	b.n	8002c20 <HAL_DMA2D_ConfigLayer+0x114>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	3318      	adds	r3, #24
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b56:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <HAL_DMA2D_ConfigLayer+0x120>)
 8002b58:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b0a      	cmp	r3, #10
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA2D_ConfigLayer+0x5e>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	d107      	bne.n	8002b7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e005      	b.n	8002b86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d120      	bne.n	8002bce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	ea02 0103 	and.w	r1, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d003      	beq.n	8002bbe <HAL_DMA2D_ConfigLayer+0xb2>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	d127      	bne.n	8002c0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
 8002bcc:	e01f      	b.n	8002c0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	ea02 0103 	and.w	r1, r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA2D_ConfigLayer+0xf4>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d106      	bne.n	8002c0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c0c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	ff03000f 	.word	0xff03000f

08002c30 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b08b      	sub	sp, #44	; 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	041a      	lsls	r2, r3, #16
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c68:	d174      	bne.n	8002d54 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c78:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c80:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	e053      	b.n	8002d4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e048      	b.n	8002d4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d111      	bne.n	8002ce4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	0cdb      	lsrs	r3, r3, #19
 8002cc4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	0a9b      	lsrs	r3, r3, #10
 8002cca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	02db      	lsls	r3, r3, #11
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e032      	b.n	8002d4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d117      	bne.n	8002d1c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	0fdb      	lsrs	r3, r3, #31
 8002cf0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	0cdb      	lsrs	r3, r3, #19
 8002cf6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	03db      	lsls	r3, r3, #15
 8002d12:	4313      	orrs	r3, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	e016      	b.n	8002d4a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	0f1b      	lsrs	r3, r3, #28
 8002d20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	0d1b      	lsrs	r3, r3, #20
 8002d26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	0b1b      	lsrs	r3, r3, #12
 8002d2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	011a      	lsls	r2, r3, #4
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	031b      	lsls	r3, r3, #12
 8002d42:	4313      	orrs	r3, r2
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d52:	e003      	b.n	8002d5c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	372c      	adds	r7, #44	; 0x2c
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e177      	b.n	8003074 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8166 	bne.w	800306e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80c0 	beq.w	800306e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_GPIO_Init+0x324>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a65      	ldr	r2, [pc, #404]	; (800308c <HAL_GPIO_Init+0x324>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_GPIO_Init+0x324>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a61      	ldr	r2, [pc, #388]	; (8003090 <HAL_GPIO_Init+0x328>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_GPIO_Init+0x32c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d037      	beq.n	8002fa6 <HAL_GPIO_Init+0x23e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a57      	ldr	r2, [pc, #348]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_GPIO_Init+0x23a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_GPIO_Init+0x334>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02b      	beq.n	8002f9e <HAL_GPIO_Init+0x236>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a55      	ldr	r2, [pc, #340]	; (80030a0 <HAL_GPIO_Init+0x338>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d025      	beq.n	8002f9a <HAL_GPIO_Init+0x232>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a54      	ldr	r2, [pc, #336]	; (80030a4 <HAL_GPIO_Init+0x33c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <HAL_GPIO_Init+0x22e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a53      	ldr	r2, [pc, #332]	; (80030a8 <HAL_GPIO_Init+0x340>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0x22a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_GPIO_Init+0x344>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a51      	ldr	r2, [pc, #324]	; (80030b0 <HAL_GPIO_Init+0x348>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a50      	ldr	r2, [pc, #320]	; (80030b4 <HAL_GPIO_Init+0x34c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4f      	ldr	r2, [pc, #316]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f7e:	2309      	movs	r3, #9
 8002f80:	e012      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f82:	230a      	movs	r3, #10
 8002f84:	e010      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00e      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e00c      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e00a      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f92:	2305      	movs	r3, #5
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e004      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f002 0203 	and.w	r2, r2, #3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb8:	4935      	ldr	r1, [pc, #212]	; (8003090 <HAL_GPIO_Init+0x328>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <HAL_GPIO_Init+0x354>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fea:	4a34      	ldr	r2, [pc, #208]	; (80030bc <HAL_GPIO_Init+0x354>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_GPIO_Init+0x354>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_GPIO_Init+0x354>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_GPIO_Init+0x354>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_GPIO_Init+0x354>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_GPIO_Init+0x354>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <HAL_GPIO_Init+0x354>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	f67f ae84 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40013800 	.word	0x40013800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40021400 	.word	0x40021400
 80030ac:	40021800 	.word	0x40021800
 80030b0:	40021c00 	.word	0x40021c00
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40022400 	.word	0x40022400
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	619a      	str	r2, [r3, #24]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e12b      	b.n	800335e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe faee 	bl	80016fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003158:	f001 ff9e 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a81      	ldr	r2, [pc, #516]	; (8003368 <HAL_I2C_Init+0x274>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d807      	bhi.n	8003178 <HAL_I2C_Init+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a80      	ldr	r2, [pc, #512]	; (800336c <HAL_I2C_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e006      	b.n	8003186 <HAL_I2C_Init+0x92>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7d      	ldr	r2, [pc, #500]	; (8003370 <HAL_I2C_Init+0x27c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0e7      	b.n	800335e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a78      	ldr	r2, [pc, #480]	; (8003374 <HAL_I2C_Init+0x280>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_I2C_Init+0x274>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <HAL_I2C_Init+0xd4>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e009      	b.n	80031dc <HAL_I2C_Init+0xe8>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_I2C_Init+0x284>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	3301      	adds	r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	495c      	ldr	r1, [pc, #368]	; (8003368 <HAL_I2C_Init+0x274>)
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d819      	bhi.n	8003230 <HAL_I2C_Init+0x13c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e59      	subs	r1, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb1 f3f3 	udiv	r3, r1, r3
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003210:	400b      	ands	r3, r1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_I2C_Init+0x138>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e59      	subs	r1, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	e051      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800322c:	2304      	movs	r3, #4
 800322e:	e04f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_I2C_Init+0x168>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e012      	b.n	8003282 <HAL_I2C_Init+0x18e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x196>
 8003286:	2301      	movs	r3, #1
 8003288:	e022      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10e      	bne.n	80032b0 <HAL_I2C_Init+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e58      	subs	r0, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	6809      	ldr	r1, [r1, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6911      	ldr	r1, [r2, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	000186a0 	.word	0x000186a0
 800336c:	001e847f 	.word	0x001e847f
 8003370:	003d08ff 	.word	0x003d08ff
 8003374:	431bde83 	.word	0x431bde83
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	461a      	mov	r2, r3
 8003388:	460b      	mov	r3, r1
 800338a:	817b      	strh	r3, [r7, #10]
 800338c:	4613      	mov	r3, r2
 800338e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff f80e 	bl	80023b0 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 80e0 	bne.w	8003564 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2319      	movs	r3, #25
 80033aa:	2201      	movs	r2, #1
 80033ac:	4970      	ldr	r1, [pc, #448]	; (8003570 <HAL_I2C_Master_Transmit+0x1f4>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fc64 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0d3      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_I2C_Master_Transmit+0x50>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0cc      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d007      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003400:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2221      	movs	r2, #33	; 0x21
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2210      	movs	r2, #16
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	893a      	ldrh	r2, [r7, #8]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_I2C_Master_Transmit+0x1f8>)
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 face 	bl	80039dc <I2C_MasterRequestWrite>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e08d      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003460:	e066      	b.n	8003530 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fd22 	bl	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06b      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11b      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x188>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fd19 	bl	8003f40 <I2C_WaitOnBTFFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2b04      	cmp	r3, #4
 800351a:	d107      	bne.n	800352c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e01a      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d194      	bne.n	8003462 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	00100002 	.word	0x00100002
 8003574:	ffff0000 	.word	0xffff0000

08003578 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	460b      	mov	r3, r1
 8003586:	817b      	strh	r3, [r7, #10]
 8003588:	4613      	mov	r3, r2
 800358a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7fe ff10 	bl	80023b0 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 8217 	bne.w	80039ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	497c      	ldr	r1, [pc, #496]	; (800379c <HAL_I2C_Master_Receive+0x224>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fb66 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	e20a      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x50>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e203      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d007      	beq.n	80035ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2222      	movs	r2, #34	; 0x22
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2210      	movs	r2, #16
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	893a      	ldrh	r2, [r7, #8]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <HAL_I2C_Master_Receive+0x228>)
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fa52 	bl	8003ae0 <I2C_MasterRequestRead>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c4      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d113      	bne.n	8003676 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	623b      	str	r3, [r7, #32]
 8003662:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e198      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	2b01      	cmp	r3, #1
 800367c:	d11b      	bne.n	80036b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e178      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d11b      	bne.n	80036f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	e158      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800371c:	e144      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b03      	cmp	r3, #3
 8003724:	f200 80f1 	bhi.w	800390a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b01      	cmp	r3, #1
 800372e:	d123      	bne.n	8003778 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fc4b 	bl	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e145      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003776:	e117      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	2b02      	cmp	r3, #2
 800377e:	d14e      	bne.n	800381e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	4906      	ldr	r1, [pc, #24]	; (80037a4 <HAL_I2C_Master_Receive+0x22c>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fa76 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e11a      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
 800379a:	bf00      	nop
 800379c:	00100002 	.word	0x00100002
 80037a0:	ffff0000 	.word	0xffff0000
 80037a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800381c:	e0c4      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	496c      	ldr	r1, [pc, #432]	; (80039d8 <HAL_I2C_Master_Receive+0x460>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fa27 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0cb      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	2200      	movs	r2, #0
 8003882:	4955      	ldr	r1, [pc, #340]	; (80039d8 <HAL_I2C_Master_Receive+0x460>)
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f9f9 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e09d      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003908:	e04e      	b.n	80039a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fb5e 	bl	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e058      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d124      	bne.n	80039a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f aeb6 	bne.w	800371e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00010004 	.word	0x00010004

080039dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	460b      	mov	r3, r1
 80039ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d006      	beq.n	8003a06 <I2C_MasterRequestWrite+0x2a>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d003      	beq.n	8003a06 <I2C_MasterRequestWrite+0x2a>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a04:	d108      	bne.n	8003a18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e00b      	b.n	8003a30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d107      	bne.n	8003a30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f91d 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a56:	d103      	bne.n	8003a60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e035      	b.n	8003ad0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a7c:	611a      	str	r2, [r3, #16]
 8003a7e:	e01b      	b.n	8003ab8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a80:	897b      	ldrh	r3, [r7, #10]
 8003a82:	11db      	asrs	r3, r3, #7
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0306 	and.w	r3, r3, #6
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f063 030f 	orn	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <I2C_MasterRequestWrite+0xfc>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f966 	bl	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e010      	b.n	8003ad0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <I2C_MasterRequestWrite+0x100>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f956 	bl	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	00010008 	.word	0x00010008
 8003adc:	00010002 	.word	0x00010002

08003ae0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d006      	beq.n	8003b1a <I2C_MasterRequestRead+0x3a>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d003      	beq.n	8003b1a <I2C_MasterRequestRead+0x3a>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b18:	d108      	bne.n	8003b2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00b      	b.n	8003b44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	2b11      	cmp	r3, #17
 8003b32:	d107      	bne.n	8003b44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f893 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d103      	bne.n	8003b74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e079      	b.n	8003c6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e05f      	b.n	8003c54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	11db      	asrs	r3, r3, #7
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0306 	and.w	r3, r3, #6
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f063 030f 	orn	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4930      	ldr	r1, [pc, #192]	; (8003c74 <I2C_MasterRequestRead+0x194>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f8dc 	bl	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e054      	b.n	8003c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4929      	ldr	r1, [pc, #164]	; (8003c78 <I2C_MasterRequestRead+0x198>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8cc 	bl	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e044      	b.n	8003c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f831 	bl	8003c7c <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2e:	d103      	bne.n	8003c38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e017      	b.n	8003c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c3c:	897b      	ldrh	r3, [r7, #10]
 8003c3e:	11db      	asrs	r3, r3, #7
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0306 	and.w	r3, r3, #6
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f063 030e 	orn	r3, r3, #14
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <I2C_MasterRequestRead+0x198>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f888 	bl	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	00010008 	.word	0x00010008
 8003c78:	00010002 	.word	0x00010002

08003c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8c:	e048      	b.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d044      	beq.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fe fb8b 	bl	80023b0 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d139      	bne.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10d      	bne.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	e00c      	b.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d116      	bne.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e023      	b.n	8003d68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d10d      	bne.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	e00c      	b.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d093      	beq.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d7e:	e071      	b.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d123      	bne.n	8003dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e067      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d041      	beq.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fe fae6 	bl	80023b0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d136      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10c      	bne.n	8003e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e00b      	b.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	43da      	mvns	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e021      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10c      	bne.n	8003e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	43da      	mvns	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e00b      	b.n	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f af6d 	bne.w	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebc:	e034      	b.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8e3 	bl	800408a <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e034      	b.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d028      	beq.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fa6b 	bl	80023b0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11d      	bne.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d016      	beq.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e007      	b.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d1c3      	bne.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f4c:	e034      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f89b 	bl	800408a <I2C_IsAcknowledgeFailed>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e034      	b.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d028      	beq.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fa23 	bl	80023b0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11d      	bne.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d016      	beq.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d1c3      	bne.n	8003f4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fdc:	e049      	b.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d119      	bne.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e030      	b.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe f9c6 	bl	80023b0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d11d      	bne.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d016      	beq.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e007      	b.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d1ae      	bne.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d11b      	bne.n	80040da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d129      	bne.n	8004152 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2224      	movs	r2, #36	; 0x24
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0210 	bic.w	r2, r2, #16
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d12a      	bne.n	80041d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2224      	movs	r2, #36	; 0x24
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800419a:	89fb      	ldrh	r3, [r7, #14]
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	89fa      	ldrh	r2, [r7, #14]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0bf      	b.n	8004372 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fae2 	bl	80017d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004222:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004238:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_LTDC_Init+0x19c>)
 8004254:	400b      	ands	r3, r1
 8004256:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_LTDC_Init+0x19c>)
 8004282:	400b      	ands	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_LTDC_Init+0x19c>)
 80042b0:	400b      	ands	r3, r1
 80042b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6919      	ldr	r1, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6959      	ldr	r1, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_LTDC_Init+0x19c>)
 80042de:	400b      	ands	r3, r1
 80042e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6959      	ldr	r1, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0206 	orr.w	r2, r2, #6
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	f000f800 	.word	0xf000f800

08004380 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_LTDC_ConfigLayer+0x1a>
 8004396:	2302      	movs	r3, #2
 8004398:	e02c      	b.n	80043f4 <HAL_LTDC_ConfigLayer+0x74>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2134      	movs	r1, #52	; 0x34
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f847 	bl	8004468 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2201      	movs	r2, #1
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bdb0      	pop	{r4, r5, r7, pc}

080043fc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_LTDC_SetAddress+0x1a>
 8004412:	2302      	movs	r3, #2
 8004414:	e024      	b.n	8004460 <HAL_LTDC_SetAddress+0x64>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2234      	movs	r2, #52	; 0x34
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	3338      	adds	r3, #56	; 0x38
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6979      	ldr	r1, [r7, #20]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f811 	bl	8004468 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	; 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	0c1b      	lsrs	r3, r3, #16
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	4413      	add	r3, r2
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	4413      	add	r3, r2
 8004496:	3384      	adds	r3, #132	; 0x84
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	4611      	mov	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	01d2      	lsls	r2, r2, #7
 80044a4:	440a      	add	r2, r1
 80044a6:	3284      	adds	r2, #132	; 0x84
 80044a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	01db      	lsls	r3, r3, #7
 80044cc:	440b      	add	r3, r1
 80044ce:	3384      	adds	r3, #132	; 0x84
 80044d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e6:	4413      	add	r3, r2
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	3384      	adds	r3, #132	; 0x84
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4611      	mov	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	01d2      	lsls	r2, r2, #7
 8004506:	440a      	add	r2, r1
 8004508:	3284      	adds	r2, #132	; 0x84
 800450a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800450e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451e:	4413      	add	r3, r2
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	01db      	lsls	r3, r3, #7
 800452c:	440b      	add	r3, r1
 800452e:	3384      	adds	r3, #132	; 0x84
 8004530:	4619      	mov	r1, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	01db      	lsls	r3, r3, #7
 8004542:	4413      	add	r3, r2
 8004544:	3384      	adds	r3, #132	; 0x84
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4611      	mov	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	01d2      	lsls	r2, r2, #7
 8004552:	440a      	add	r2, r1
 8004554:	3284      	adds	r2, #132	; 0x84
 8004556:	f023 0307 	bic.w	r3, r3, #7
 800455a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	01db      	lsls	r3, r3, #7
 8004566:	4413      	add	r3, r2
 8004568:	3384      	adds	r3, #132	; 0x84
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	4413      	add	r3, r2
 800459a:	3384      	adds	r3, #132	; 0x84
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	01db      	lsls	r3, r3, #7
 80045a8:	4413      	add	r3, r2
 80045aa:	3384      	adds	r3, #132	; 0x84
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b8:	461a      	mov	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	431a      	orrs	r2, r3
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	440b      	add	r3, r1
 80045ce:	3384      	adds	r3, #132	; 0x84
 80045d0:	4619      	mov	r1, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	01db      	lsls	r3, r3, #7
 80045e2:	4413      	add	r3, r2
 80045e4:	3384      	adds	r3, #132	; 0x84
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	4611      	mov	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	01d2      	lsls	r2, r2, #7
 80045f2:	440a      	add	r2, r1
 80045f4:	3284      	adds	r2, #132	; 0x84
 80045f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	01db      	lsls	r3, r3, #7
 8004606:	4413      	add	r3, r2
 8004608:	3384      	adds	r3, #132	; 0x84
 800460a:	461a      	mov	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	01db      	lsls	r3, r3, #7
 800461c:	4413      	add	r3, r2
 800461e:	3384      	adds	r3, #132	; 0x84
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	4611      	mov	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	01d2      	lsls	r2, r2, #7
 800462c:	440a      	add	r2, r1
 800462e:	3284      	adds	r2, #132	; 0x84
 8004630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	6809      	ldr	r1, [r1, #0]
 8004646:	4608      	mov	r0, r1
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	01c9      	lsls	r1, r1, #7
 800464c:	4401      	add	r1, r0
 800464e:	3184      	adds	r1, #132	; 0x84
 8004650:	4313      	orrs	r3, r2
 8004652:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	01db      	lsls	r3, r3, #7
 800465e:	4413      	add	r3, r2
 8004660:	3384      	adds	r3, #132	; 0x84
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4413      	add	r3, r2
 8004670:	3384      	adds	r3, #132	; 0x84
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	01db      	lsls	r3, r3, #7
 8004682:	4413      	add	r3, r2
 8004684:	3384      	adds	r3, #132	; 0x84
 8004686:	461a      	mov	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004696:	2304      	movs	r3, #4
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e01b      	b.n	80046d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d102      	bne.n	80046aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046a4:	2303      	movs	r3, #3
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e014      	b.n	80046d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d00b      	beq.n	80046ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d007      	beq.n	80046ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d003      	beq.n	80046ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046c6:	2b07      	cmp	r3, #7
 80046c8:	d102      	bne.n	80046d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046ca:	2302      	movs	r3, #2
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e001      	b.n	80046d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	01db      	lsls	r3, r3, #7
 80046de:	4413      	add	r3, r2
 80046e0:	3384      	adds	r3, #132	; 0x84
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	4611      	mov	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	01d2      	lsls	r2, r2, #7
 80046ee:	440a      	add	r2, r1
 80046f0:	3284      	adds	r2, #132	; 0x84
 80046f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80046f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1acb      	subs	r3, r1, r3
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	6809      	ldr	r1, [r1, #0]
 800471a:	4608      	mov	r0, r1
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	01c9      	lsls	r1, r1, #7
 8004720:	4401      	add	r1, r0
 8004722:	3184      	adds	r1, #132	; 0x84
 8004724:	4313      	orrs	r3, r2
 8004726:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	01db      	lsls	r3, r3, #7
 8004732:	4413      	add	r3, r2
 8004734:	3384      	adds	r3, #132	; 0x84
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	4611      	mov	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	01d2      	lsls	r2, r2, #7
 8004742:	440a      	add	r2, r1
 8004744:	3284      	adds	r2, #132	; 0x84
 8004746:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	01db      	lsls	r3, r3, #7
 800475a:	4413      	add	r3, r2
 800475c:	3384      	adds	r3, #132	; 0x84
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	4413      	add	r3, r2
 8004772:	3384      	adds	r3, #132	; 0x84
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	4611      	mov	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	01d2      	lsls	r2, r2, #7
 8004780:	440a      	add	r2, r1
 8004782:	3284      	adds	r2, #132	; 0x84
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6013      	str	r3, [r2, #0]
}
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_PWREx_EnableOverDrive+0x90>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_PWREx_EnableOverDrive+0x90>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_PWREx_EnableOverDrive+0x90>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_PWREx_EnableOverDrive+0x94>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c4:	f7fd fdf4 	bl	80023b0 <HAL_GetTick>
 80047c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ca:	e009      	b.n	80047e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047cc:	f7fd fdf0 	bl	80023b0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047da:	d901      	bls.n	80047e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e01f      	b.n	8004820 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <HAL_PWREx_EnableOverDrive+0x98>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d1ee      	bne.n	80047cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f4:	f7fd fddc 	bl	80023b0 <HAL_GetTick>
 80047f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047fa:	e009      	b.n	8004810 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047fc:	f7fd fdd8 	bl	80023b0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800480a:	d901      	bls.n	8004810 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e007      	b.n	8004820 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <HAL_PWREx_EnableOverDrive+0x98>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800481c:	d1ee      	bne.n	80047fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40023800 	.word	0x40023800
 800482c:	420e0040 	.word	0x420e0040
 8004830:	40007000 	.word	0x40007000
 8004834:	420e0044 	.word	0x420e0044

08004838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e267      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d075      	beq.n	8004942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004856:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00c      	beq.n	800487c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004862:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486a:	2b08      	cmp	r3, #8
 800486c:	d112      	bne.n	8004894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800486e:	4b82      	ldr	r3, [pc, #520]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487a:	d10b      	bne.n	8004894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	4b7e      	ldr	r3, [pc, #504]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05b      	beq.n	8004940 <HAL_RCC_OscConfig+0x108>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d157      	bne.n	8004940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e242      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d106      	bne.n	80048ac <HAL_RCC_OscConfig+0x74>
 800489e:	4b76      	ldr	r3, [pc, #472]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a75      	ldr	r2, [pc, #468]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01d      	b.n	80048e8 <HAL_RCC_OscConfig+0xb0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x98>
 80048b6:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6f      	ldr	r2, [pc, #444]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6c      	ldr	r2, [pc, #432]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0xb0>
 80048d0:	4b69      	ldr	r3, [pc, #420]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a68      	ldr	r2, [pc, #416]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fd fd5e 	bl	80023b0 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fd fd5a 	bl	80023b0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e207      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0xc0>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd fd4a 	bl	80023b0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004920:	f7fd fd46 	bl	80023b0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1f3      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0xe8>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d063      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800494e:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004962:	2b08      	cmp	r3, #8
 8004964:	d11c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004966:	4b44      	ldr	r3, [pc, #272]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d116      	bne.n	80049a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x152>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e1c7      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4937      	ldr	r1, [pc, #220]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	e03a      	b.n	8004a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a8:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x244>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fd fcff 	bl	80023b0 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b6:	f7fd fcfb 	bl	80023b0 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1a8      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d4:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4925      	ldr	r1, [pc, #148]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	e015      	b.n	8004a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_OscConfig+0x244>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fcde 	bl	80023b0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f8:	f7fd fcda 	bl	80023b0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e187      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d036      	beq.n	8004a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_RCC_OscConfig+0x248>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd fcbe 	bl	80023b0 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fd fcba 	bl	80023b0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e167      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x200>
 8004a56:	e01b      	b.n	8004a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_OscConfig+0x248>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fca7 	bl	80023b0 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a64:	e00e      	b.n	8004a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a66:	f7fd fca3 	bl	80023b0 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d907      	bls.n	8004a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e150      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	42470000 	.word	0x42470000
 8004a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a84:	4b88      	ldr	r3, [pc, #544]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ea      	bne.n	8004a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8097 	beq.w	8004bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa2:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	4b7d      	ldr	r3, [pc, #500]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a7c      	ldr	r2, [pc, #496]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abc:	6413      	str	r3, [r2, #64]	; 0x40
 8004abe:	4b7a      	ldr	r3, [pc, #488]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ace:	4b77      	ldr	r3, [pc, #476]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d118      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ada:	4b74      	ldr	r3, [pc, #464]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a73      	ldr	r2, [pc, #460]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae6:	f7fd fc63 	bl	80023b0 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aee:	f7fd fc5f 	bl	80023b0 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e10c      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b00:	4b6a      	ldr	r3, [pc, #424]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_OscConfig+0x2ea>
 8004b14:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a63      	ldr	r2, [pc, #396]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	e01c      	b.n	8004b5c <HAL_RCC_OscConfig+0x324>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x30c>
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a5e      	ldr	r2, [pc, #376]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
 8004b36:	4b5c      	ldr	r3, [pc, #368]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	4a5b      	ldr	r2, [pc, #364]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	; 0x70
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0x324>
 8004b44:	4b58      	ldr	r3, [pc, #352]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a57      	ldr	r2, [pc, #348]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	4b55      	ldr	r3, [pc, #340]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a54      	ldr	r2, [pc, #336]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 0304 	bic.w	r3, r3, #4
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd fc24 	bl	80023b0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fd fc20 	bl	80023b0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0cb      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b82:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RCC_OscConfig+0x334>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b90:	f7fd fc0e 	bl	80023b0 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fd fc0a 	bl	80023b0 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0b5      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bae:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ee      	bne.n	8004b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc0:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	4a38      	ldr	r2, [pc, #224]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a1 	beq.w	8004d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd6:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d05c      	beq.n	8004c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d141      	bne.n	8004c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fbde 	bl	80023b0 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fd fbda 	bl	80023b0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e087      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	491b      	ldr	r1, [pc, #108]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fbb3 	bl	80023b0 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd fbaf 	bl	80023b0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e05c      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x416>
 8004c6c:	e054      	b.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fb9c 	bl	80023b0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fb98 	bl	80023b0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e045      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x444>
 8004c9a:	e03d      	b.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e038      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x4ec>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d028      	beq.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d121      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d11a      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800

08004d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0cc      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90c      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b63      	ldr	r3, [pc, #396]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0b8      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d020      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d7c:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a58      	ldr	r2, [pc, #352]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d94:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a52      	ldr	r2, [pc, #328]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da0:	4b50      	ldr	r3, [pc, #320]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	494d      	ldr	r1, [pc, #308]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d044      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d119      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e07f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de6:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e067      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e06:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 0203 	bic.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4934      	ldr	r1, [pc, #208]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e18:	f7fd faca 	bl	80023b0 <HAL_GetTick>
 8004e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e20:	f7fd fac6 	bl	80023b0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e04f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 020c 	and.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1eb      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d20c      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e032      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e7c:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4916      	ldr	r1, [pc, #88]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eae:	f000 f821 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec0:	5ccb      	ldrb	r3, [r1, r3]
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fa2a 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023c00 	.word	0x40023c00
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	08054ee4 	.word	0x08054ee4
 8004eec:	20000024 	.word	0x20000024
 8004ef0:	20000028 	.word	0x20000028

08004ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef8:	b090      	sub	sp, #64	; 0x40
 8004efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	2300      	movs	r3, #0
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d00d      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x40>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	f200 80a1 	bhi.w	8005060 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x34>
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d003      	beq.n	8004f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f26:	e09b      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f2c:	e09b      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f2e:	4b53      	ldr	r3, [pc, #332]	; (800507c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f32:	e098      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d028      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	2200      	movs	r2, #0
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	627a      	str	r2, [r7, #36]	; 0x24
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4b47      	ldr	r3, [pc, #284]	; (800507c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f60:	fb03 f201 	mul.w	r2, r3, r1
 8004f64:	2300      	movs	r3, #0
 8004f66:	fb00 f303 	mul.w	r3, r0, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4a43      	ldr	r2, [pc, #268]	; (800507c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8004f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f74:	460a      	mov	r2, r1
 8004f76:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	2200      	movs	r2, #0
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	61fa      	str	r2, [r7, #28]
 8004f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f8e:	f7fb f97f 	bl	8000290 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4613      	mov	r3, r2
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9a:	e053      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9c:	4b35      	ldr	r3, [pc, #212]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	099b      	lsrs	r3, r3, #6
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	617a      	str	r2, [r7, #20]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fae:	f04f 0b00 	mov.w	fp, #0
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	f04f 0000 	mov.w	r0, #0
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	0159      	lsls	r1, r3, #5
 8004fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc4:	0150      	lsls	r0, r2, #5
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	ebb2 080a 	subs.w	r8, r2, sl
 8004fce:	eb63 090b 	sbc.w	r9, r3, fp
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8004fea:	eb63 0509 	sbc.w	r5, r3, r9
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	00eb      	lsls	r3, r5, #3
 8004ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffc:	00e2      	lsls	r2, r4, #3
 8004ffe:	4614      	mov	r4, r2
 8005000:	461d      	mov	r5, r3
 8005002:	eb14 030a 	adds.w	r3, r4, sl
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	eb45 030b 	adc.w	r3, r5, fp
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501a:	4629      	mov	r1, r5
 800501c:	028b      	lsls	r3, r1, #10
 800501e:	4621      	mov	r1, r4
 8005020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005024:	4621      	mov	r1, r4
 8005026:	028a      	lsls	r2, r1, #10
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	2200      	movs	r2, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005038:	f7fb f92a 	bl	8000290 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4613      	mov	r3, r2
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	3301      	adds	r3, #1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800505e:	e002      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCC_GetSysClockFreq+0x184>)
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005068:	4618      	mov	r0, r3
 800506a:	3740      	adds	r7, #64	; 0x40
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	00f42400 	.word	0x00f42400
 800507c:	017d7840 	.word	0x017d7840

08005080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_RCC_GetHCLKFreq+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000024 	.word	0x20000024

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800509c:	f7ff fff0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	08054ef4 	.word	0x08054ef4

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d075      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050f4:	4b91      	ldr	r3, [pc, #580]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fa:	f7fd f959 	bl	80023b0 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005102:	f7fd f955 	bl	80023b0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e189      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005114:	4b8a      	ldr	r3, [pc, #552]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	019a      	lsls	r2, r3, #6
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	071b      	lsls	r3, r3, #28
 8005138:	4981      	ldr	r1, [pc, #516]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01f      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800514c:	4b7c      	ldr	r3, [pc, #496]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005152:	0f1b      	lsrs	r3, r3, #28
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	019a      	lsls	r2, r3, #6
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	431a      	orrs	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	071b      	lsls	r3, r3, #28
 800516c:	4974      	ldr	r1, [pc, #464]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005174:	4b72      	ldr	r3, [pc, #456]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517a:	f023 021f 	bic.w	r2, r3, #31
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	3b01      	subs	r3, #1
 8005184:	496e      	ldr	r1, [pc, #440]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	019a      	lsls	r2, r3, #6
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	071b      	lsls	r3, r3, #28
 80051ac:	4964      	ldr	r1, [pc, #400]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051b4:	4b61      	ldr	r3, [pc, #388]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fd f8f9 	bl	80023b0 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051c2:	f7fd f8f5 	bl	80023b0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e129      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d4:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d079      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051f8:	4b52      	ldr	r3, [pc, #328]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fe:	f7fd f8d7 	bl	80023b0 <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005206:	f7fd f8d3 	bl	80023b0 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e107      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005218:	4b49      	ldr	r3, [pc, #292]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005224:	d0ef      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	0f1b      	lsrs	r3, r3, #28
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	019a      	lsls	r2, r3, #6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	431a      	orrs	r2, r3
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	493b      	ldr	r1, [pc, #236]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	3b01      	subs	r3, #1
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	4934      	ldr	r1, [pc, #208]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01e      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	0e1b      	lsrs	r3, r3, #24
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	019a      	lsls	r2, r3, #6
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	071b      	lsls	r3, r3, #28
 80052a0:	4927      	ldr	r1, [pc, #156]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	4922      	ldr	r1, [pc, #136]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052be:	4b21      	ldr	r3, [pc, #132]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c4:	f7fd f874 	bl	80023b0 <HAL_GetTick>
 80052c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052cc:	f7fd f870 	bl	80023b0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0a4      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d1ef      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 808b 	beq.w	8005410 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	; 0x40
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005322:	f7fd f845 	bl	80023b0 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005328:	e010      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fd f841 	bl	80023b0 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d909      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e075      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800533c:	42470068 	.word	0x42470068
 8005340:	40023800 	.word	0x40023800
 8005344:	42470070 	.word	0x42470070
 8005348:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800534c:	4b38      	ldr	r3, [pc, #224]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0e8      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005358:	4b36      	ldr	r3, [pc, #216]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005360:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02f      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	d028      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005376:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005386:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800538c:	4a29      	ldr	r2, [pc, #164]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005392:	4b28      	ldr	r3, [pc, #160]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d114      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800539e:	f7fd f807 	bl	80023b0 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	e00a      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd f803 	bl	80023b0 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e035      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053bc:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ee      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d4:	d10d      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	4912      	ldr	r1, [pc, #72]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]
 80053f0:	e005      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4a0f      	ldr	r2, [pc, #60]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053fc:	6093      	str	r3, [r2, #8]
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005400:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800540c:	4313      	orrs	r3, r2
 800540e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005424:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40007000 	.word	0x40007000
 8005434:	40023800 	.word	0x40023800
 8005438:	42470e40 	.word	0x42470e40
 800543c:	424711e0 	.word	0x424711e0

08005440 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e025      	b.n	80054a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc fbf5 	bl	8001c58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fb17 	bl	8005ab4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	461a      	mov	r2, r3
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	f000 fb6c 	bl	8005b6e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d101      	bne.n	80054c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
 80054c4:	e021      	b.n	800550a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d002      	beq.n	80054d2 <HAL_SDRAM_SendCommand+0x2a>
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d118      	bne.n	8005504 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fbac 	bl	8005c40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d104      	bne.n	80054fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2205      	movs	r2, #5
 80054f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054f8:	e006      	b.n	8005508 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005502:	e001      	b.n	8005508 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d101      	bne.n	800552c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	e016      	b.n	800555a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d10f      	bne.n	8005558 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fbb7 	bl	8005cba <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e07b      	b.n	800566c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d009      	beq.n	800559a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	61da      	str	r2, [r3, #28]
 800558c:	e005      	b.n	800559a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fc fa75 	bl	8001aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	ea42 0103 	orr.w	r1, r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	f003 0104 	and.w	r1, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f003 0210 	and.w	r2, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800565a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_SPI_Transmit+0x22>
 8005692:	2302      	movs	r3, #2
 8005694:	e12d      	b.n	80058f2 <HAL_SPI_Transmit+0x27e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569e:	f7fc fe87 	bl	80023b0 <HAL_GetTick>
 80056a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
 80056b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056b8:	e116      	b.n	80058e8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Transmit+0x52>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056ca:	e10d      	b.n	80058e8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2203      	movs	r2, #3
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	d10f      	bne.n	8005734 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d007      	beq.n	8005752 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575a:	d14f      	bne.n	80057fc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_Transmit+0xf6>
 8005764:	8afb      	ldrh	r3, [r7, #22]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d142      	bne.n	80057f0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800578e:	e02f      	b.n	80057f0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d112      	bne.n	80057c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80057c2:	e015      	b.n	80057f0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fc fdf4 	bl	80023b0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d803      	bhi.n	80057dc <HAL_SPI_Transmit+0x168>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_Transmit+0x16e>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80057ee:	e07b      	b.n	80058e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ca      	bne.n	8005790 <HAL_SPI_Transmit+0x11c>
 80057fa:	e050      	b.n	800589e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x196>
 8005804:	8afb      	ldrh	r3, [r7, #22]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d144      	bne.n	8005894 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005830:	e030      	b.n	8005894 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d113      	bne.n	8005868 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36
 8005866:	e015      	b.n	8005894 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005868:	f7fc fda2 	bl	80023b0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_Transmit+0x20c>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Transmit+0x212>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005892:	e029      	b.n	80058e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1c9      	bne.n	8005832 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8b2 	bl	8005a0c <SPI_EndRxTxTransaction>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e003      	b.n	80058e8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800590c:	f7fc fd50 	bl	80023b0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	4413      	add	r3, r2
 800591a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800591c:	f7fc fd48 	bl	80023b0 <HAL_GetTick>
 8005920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005922:	4b39      	ldr	r3, [pc, #228]	; (8005a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	0d1b      	lsrs	r3, r3, #20
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005932:	e054      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d050      	beq.n	80059de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800593c:	f7fc fd38 	bl	80023b0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	429a      	cmp	r2, r3
 800594a:	d902      	bls.n	8005952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d13d      	bne.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596a:	d111      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	d004      	beq.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597e:	d107      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005998:	d10f      	bne.n	80059ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e017      	b.n	80059fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3b01      	subs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d19b      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000024 	.word	0x20000024

08005a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	2102      	movs	r1, #2
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff ff6a 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e032      	b.n	8005aa4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <SPI_EndRxTxTransaction+0xa0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <SPI_EndRxTxTransaction+0xa4>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	0d5b      	lsrs	r3, r3, #21
 8005a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5c:	d112      	bne.n	8005a84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff ff47 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d016      	beq.n	8005aa2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e00f      	b.n	8005aa4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d0f2      	beq.n	8005a84 <SPI_EndRxTxTransaction+0x78>
 8005a9e:	e000      	b.n	8005aa2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005aa0:	bf00      	nop
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000024 	.word	0x20000024
 8005ab0:	165e9f81 	.word	0x165e9f81

08005ab4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d123      	bne.n	8005b0e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	6851      	ldr	r1, [r2, #4]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	4311      	orrs	r1, r2
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	68d2      	ldr	r2, [r2, #12]
 8005ae0:	4311      	orrs	r1, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	6912      	ldr	r2, [r2, #16]
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	6952      	ldr	r2, [r2, #20]
 8005aec:	4311      	orrs	r1, r2
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	6992      	ldr	r2, [r2, #24]
 8005af2:	4311      	orrs	r1, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	69d2      	ldr	r2, [r2, #28]
 8005af8:	4311      	orrs	r1, r2
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	6a12      	ldr	r2, [r2, #32]
 8005afe:	4311      	orrs	r1, r2
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b04:	430a      	orrs	r2, r1
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e028      	b.n	8005b60 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	69d9      	ldr	r1, [r3, #28]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4319      	orrs	r1, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	430b      	orrs	r3, r1
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	6851      	ldr	r1, [r2, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	4311      	orrs	r1, r2
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	4311      	orrs	r1, r2
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	6912      	ldr	r2, [r2, #16]
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	6952      	ldr	r2, [r2, #20]
 8005b52:	4311      	orrs	r1, r2
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	6992      	ldr	r2, [r2, #24]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d128      	bne.n	8005bd2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1e59      	subs	r1, r3, #1
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4319      	orrs	r1, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	4319      	orrs	r1, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	4319      	orrs	r1, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	4319      	orrs	r1, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	051b      	lsls	r3, r3, #20
 8005bbe:	4319      	orrs	r1, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	e02f      	b.n	8005c32 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	3a01      	subs	r2, #1
 8005be4:	0311      	lsls	r1, r2, #12
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	6952      	ldr	r2, [r2, #20]
 8005bea:	3a01      	subs	r2, #1
 8005bec:	0512      	lsls	r2, r2, #20
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	1e59      	subs	r1, r3, #1
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4319      	orrs	r1, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	4319      	orrs	r1, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	4319      	orrs	r1, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	0d9b      	lsrs	r3, r3, #22
 8005c56:	059b      	lsls	r3, r3, #22
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	6811      	ldr	r1, [r2, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	6852      	ldr	r2, [r2, #4]
 8005c60:	4311      	orrs	r1, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	6892      	ldr	r2, [r2, #8]
 8005c66:	3a01      	subs	r2, #1
 8005c68:	0152      	lsls	r2, r2, #5
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	68d2      	ldr	r2, [r2, #12]
 8005c70:	0252      	lsls	r2, r2, #9
 8005c72:	430a      	orrs	r2, r1
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c7a:	f7fc fb99 	bl	80023b0 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005c80:	e010      	b.n	8005ca4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d00c      	beq.n	8005ca4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <FMC_SDRAM_SendCommand+0x60>
 8005c90:	f7fc fb8e 	bl	80023b0 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d201      	bcs.n	8005ca4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e006      	b.n	8005cb2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d0e8      	beq.n	8005c82 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ccc:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	0052      	lsls	r2, r2, #1
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <siprintf>:
 8005ce8:	b40e      	push	{r1, r2, r3}
 8005cea:	b500      	push	{lr}
 8005cec:	b09c      	sub	sp, #112	; 0x70
 8005cee:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	9006      	str	r0, [sp, #24]
 8005cf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cf8:	4809      	ldr	r0, [pc, #36]	; (8005d20 <siprintf+0x38>)
 8005cfa:	9107      	str	r1, [sp, #28]
 8005cfc:	9104      	str	r1, [sp, #16]
 8005cfe:	4909      	ldr	r1, [pc, #36]	; (8005d24 <siprintf+0x3c>)
 8005d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d04:	9105      	str	r1, [sp, #20]
 8005d06:	6800      	ldr	r0, [r0, #0]
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	a902      	add	r1, sp, #8
 8005d0c:	f000 f992 	bl	8006034 <_svfiprintf_r>
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	b01c      	add	sp, #112	; 0x70
 8005d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d1c:	b003      	add	sp, #12
 8005d1e:	4770      	bx	lr
 8005d20:	2000007c 	.word	0x2000007c
 8005d24:	ffff0208 	.word	0xffff0208

08005d28 <memset>:
 8005d28:	4402      	add	r2, r0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <memset+0xa>
 8005d30:	4770      	bx	lr
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	e7f9      	b.n	8005d2c <memset+0x4>

08005d38 <__errno>:
 8005d38:	4b01      	ldr	r3, [pc, #4]	; (8005d40 <__errno+0x8>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	2000007c 	.word	0x2000007c

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4d0d      	ldr	r5, [pc, #52]	; (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	; (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2600      	movs	r6, #0
 8005d50:	42a6      	cmp	r6, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4d0b      	ldr	r5, [pc, #44]	; (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	; (8005d88 <__libc_init_array+0x44>)
 8005d58:	f000 fc6a 	bl	8006630 <_init>
 8005d5c:	1b64      	subs	r4, r4, r5
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2600      	movs	r6, #0
 8005d62:	42a6      	cmp	r6, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6c:	4798      	blx	r3
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d76:	4798      	blx	r3
 8005d78:	3601      	adds	r6, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	08054f38 	.word	0x08054f38
 8005d80:	08054f38 	.word	0x08054f38
 8005d84:	08054f38 	.word	0x08054f38
 8005d88:	08054f3c 	.word	0x08054f3c

08005d8c <__retarget_lock_acquire_recursive>:
 8005d8c:	4770      	bx	lr

08005d8e <__retarget_lock_release_recursive>:
 8005d8e:	4770      	bx	lr

08005d90 <_free_r>:
 8005d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d92:	2900      	cmp	r1, #0
 8005d94:	d044      	beq.n	8005e20 <_free_r+0x90>
 8005d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9a:	9001      	str	r0, [sp, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005da2:	bfb8      	it	lt
 8005da4:	18e4      	addlt	r4, r4, r3
 8005da6:	f000 f8df 	bl	8005f68 <__malloc_lock>
 8005daa:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <_free_r+0x94>)
 8005dac:	9801      	ldr	r0, [sp, #4]
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	b933      	cbnz	r3, 8005dc0 <_free_r+0x30>
 8005db2:	6063      	str	r3, [r4, #4]
 8005db4:	6014      	str	r4, [r2, #0]
 8005db6:	b003      	add	sp, #12
 8005db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dbc:	f000 b8da 	b.w	8005f74 <__malloc_unlock>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d908      	bls.n	8005dd6 <_free_r+0x46>
 8005dc4:	6825      	ldr	r5, [r4, #0]
 8005dc6:	1961      	adds	r1, r4, r5
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	bf01      	itttt	eq
 8005dcc:	6819      	ldreq	r1, [r3, #0]
 8005dce:	685b      	ldreq	r3, [r3, #4]
 8005dd0:	1949      	addeq	r1, r1, r5
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	e7ed      	b.n	8005db2 <_free_r+0x22>
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	b10b      	cbz	r3, 8005de0 <_free_r+0x50>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d9fa      	bls.n	8005dd6 <_free_r+0x46>
 8005de0:	6811      	ldr	r1, [r2, #0]
 8005de2:	1855      	adds	r5, r2, r1
 8005de4:	42a5      	cmp	r5, r4
 8005de6:	d10b      	bne.n	8005e00 <_free_r+0x70>
 8005de8:	6824      	ldr	r4, [r4, #0]
 8005dea:	4421      	add	r1, r4
 8005dec:	1854      	adds	r4, r2, r1
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	6011      	str	r1, [r2, #0]
 8005df2:	d1e0      	bne.n	8005db6 <_free_r+0x26>
 8005df4:	681c      	ldr	r4, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	6053      	str	r3, [r2, #4]
 8005dfa:	440c      	add	r4, r1
 8005dfc:	6014      	str	r4, [r2, #0]
 8005dfe:	e7da      	b.n	8005db6 <_free_r+0x26>
 8005e00:	d902      	bls.n	8005e08 <_free_r+0x78>
 8005e02:	230c      	movs	r3, #12
 8005e04:	6003      	str	r3, [r0, #0]
 8005e06:	e7d6      	b.n	8005db6 <_free_r+0x26>
 8005e08:	6825      	ldr	r5, [r4, #0]
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf04      	itt	eq
 8005e10:	6819      	ldreq	r1, [r3, #0]
 8005e12:	685b      	ldreq	r3, [r3, #4]
 8005e14:	6063      	str	r3, [r4, #4]
 8005e16:	bf04      	itt	eq
 8005e18:	1949      	addeq	r1, r1, r5
 8005e1a:	6021      	streq	r1, [r4, #0]
 8005e1c:	6054      	str	r4, [r2, #4]
 8005e1e:	e7ca      	b.n	8005db6 <_free_r+0x26>
 8005e20:	b003      	add	sp, #12
 8005e22:	bd30      	pop	{r4, r5, pc}
 8005e24:	200003d8 	.word	0x200003d8

08005e28 <sbrk_aligned>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	4e0e      	ldr	r6, [pc, #56]	; (8005e64 <sbrk_aligned+0x3c>)
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	6831      	ldr	r1, [r6, #0]
 8005e30:	4605      	mov	r5, r0
 8005e32:	b911      	cbnz	r1, 8005e3a <sbrk_aligned+0x12>
 8005e34:	f000 fba6 	bl	8006584 <_sbrk_r>
 8005e38:	6030      	str	r0, [r6, #0]
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 fba1 	bl	8006584 <_sbrk_r>
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	d00a      	beq.n	8005e5c <sbrk_aligned+0x34>
 8005e46:	1cc4      	adds	r4, r0, #3
 8005e48:	f024 0403 	bic.w	r4, r4, #3
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	d007      	beq.n	8005e60 <sbrk_aligned+0x38>
 8005e50:	1a21      	subs	r1, r4, r0
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 fb96 	bl	8006584 <_sbrk_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d101      	bne.n	8005e60 <sbrk_aligned+0x38>
 8005e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e60:	4620      	mov	r0, r4
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	200003dc 	.word	0x200003dc

08005e68 <_malloc_r>:
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	1ccd      	adds	r5, r1, #3
 8005e6e:	f025 0503 	bic.w	r5, r5, #3
 8005e72:	3508      	adds	r5, #8
 8005e74:	2d0c      	cmp	r5, #12
 8005e76:	bf38      	it	cc
 8005e78:	250c      	movcc	r5, #12
 8005e7a:	2d00      	cmp	r5, #0
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	db01      	blt.n	8005e84 <_malloc_r+0x1c>
 8005e80:	42a9      	cmp	r1, r5
 8005e82:	d905      	bls.n	8005e90 <_malloc_r+0x28>
 8005e84:	230c      	movs	r3, #12
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	2600      	movs	r6, #0
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f64 <_malloc_r+0xfc>
 8005e94:	f000 f868 	bl	8005f68 <__malloc_lock>
 8005e98:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9c:	461c      	mov	r4, r3
 8005e9e:	bb5c      	cbnz	r4, 8005ef8 <_malloc_r+0x90>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7ff ffc0 	bl	8005e28 <sbrk_aligned>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	4604      	mov	r4, r0
 8005eac:	d155      	bne.n	8005f5a <_malloc_r+0xf2>
 8005eae:	f8d8 4000 	ldr.w	r4, [r8]
 8005eb2:	4626      	mov	r6, r4
 8005eb4:	2e00      	cmp	r6, #0
 8005eb6:	d145      	bne.n	8005f44 <_malloc_r+0xdc>
 8005eb8:	2c00      	cmp	r4, #0
 8005eba:	d048      	beq.n	8005f4e <_malloc_r+0xe6>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	eb04 0903 	add.w	r9, r4, r3
 8005ec6:	f000 fb5d 	bl	8006584 <_sbrk_r>
 8005eca:	4581      	cmp	r9, r0
 8005ecc:	d13f      	bne.n	8005f4e <_malloc_r+0xe6>
 8005ece:	6821      	ldr	r1, [r4, #0]
 8005ed0:	1a6d      	subs	r5, r5, r1
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff ffa7 	bl	8005e28 <sbrk_aligned>
 8005eda:	3001      	adds	r0, #1
 8005edc:	d037      	beq.n	8005f4e <_malloc_r+0xe6>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	442b      	add	r3, r5
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d038      	beq.n	8005f5e <_malloc_r+0xf6>
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	42a2      	cmp	r2, r4
 8005ef0:	d12b      	bne.n	8005f4a <_malloc_r+0xe2>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e00f      	b.n	8005f18 <_malloc_r+0xb0>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	1b52      	subs	r2, r2, r5
 8005efc:	d41f      	bmi.n	8005f3e <_malloc_r+0xd6>
 8005efe:	2a0b      	cmp	r2, #11
 8005f00:	d917      	bls.n	8005f32 <_malloc_r+0xca>
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	6059      	strne	r1, [r3, #4]
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	bf08      	it	eq
 8005f10:	f8c8 1000 	streq.w	r1, [r8]
 8005f14:	5162      	str	r2, [r4, r5]
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f104 060b 	add.w	r6, r4, #11
 8005f1e:	f000 f829 	bl	8005f74 <__malloc_unlock>
 8005f22:	f026 0607 	bic.w	r6, r6, #7
 8005f26:	1d23      	adds	r3, r4, #4
 8005f28:	1af2      	subs	r2, r6, r3
 8005f2a:	d0ae      	beq.n	8005e8a <_malloc_r+0x22>
 8005f2c:	1b9b      	subs	r3, r3, r6
 8005f2e:	50a3      	str	r3, [r4, r2]
 8005f30:	e7ab      	b.n	8005e8a <_malloc_r+0x22>
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	6862      	ldr	r2, [r4, #4]
 8005f36:	d1dd      	bne.n	8005ef4 <_malloc_r+0x8c>
 8005f38:	f8c8 2000 	str.w	r2, [r8]
 8005f3c:	e7ec      	b.n	8005f18 <_malloc_r+0xb0>
 8005f3e:	4623      	mov	r3, r4
 8005f40:	6864      	ldr	r4, [r4, #4]
 8005f42:	e7ac      	b.n	8005e9e <_malloc_r+0x36>
 8005f44:	4634      	mov	r4, r6
 8005f46:	6876      	ldr	r6, [r6, #4]
 8005f48:	e7b4      	b.n	8005eb4 <_malloc_r+0x4c>
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	e7cc      	b.n	8005ee8 <_malloc_r+0x80>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4638      	mov	r0, r7
 8005f54:	f000 f80e 	bl	8005f74 <__malloc_unlock>
 8005f58:	e797      	b.n	8005e8a <_malloc_r+0x22>
 8005f5a:	6025      	str	r5, [r4, #0]
 8005f5c:	e7dc      	b.n	8005f18 <_malloc_r+0xb0>
 8005f5e:	605b      	str	r3, [r3, #4]
 8005f60:	deff      	udf	#255	; 0xff
 8005f62:	bf00      	nop
 8005f64:	200003d8 	.word	0x200003d8

08005f68 <__malloc_lock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__malloc_lock+0x8>)
 8005f6a:	f7ff bf0f 	b.w	8005d8c <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	200003d4 	.word	0x200003d4

08005f74 <__malloc_unlock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__malloc_unlock+0x8>)
 8005f76:	f7ff bf0a 	b.w	8005d8e <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	200003d4 	.word	0x200003d4

08005f80 <__ssputs_r>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	688e      	ldr	r6, [r1, #8]
 8005f86:	461f      	mov	r7, r3
 8005f88:	42be      	cmp	r6, r7
 8005f8a:	680b      	ldr	r3, [r1, #0]
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4690      	mov	r8, r2
 8005f92:	d82c      	bhi.n	8005fee <__ssputs_r+0x6e>
 8005f94:	898a      	ldrh	r2, [r1, #12]
 8005f96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f9a:	d026      	beq.n	8005fea <__ssputs_r+0x6a>
 8005f9c:	6965      	ldr	r5, [r4, #20]
 8005f9e:	6909      	ldr	r1, [r1, #16]
 8005fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fa4:	eba3 0901 	sub.w	r9, r3, r1
 8005fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fac:	1c7b      	adds	r3, r7, #1
 8005fae:	444b      	add	r3, r9
 8005fb0:	106d      	asrs	r5, r5, #1
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	bf38      	it	cc
 8005fb6:	461d      	movcc	r5, r3
 8005fb8:	0553      	lsls	r3, r2, #21
 8005fba:	d527      	bpl.n	800600c <__ssputs_r+0x8c>
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7ff ff53 	bl	8005e68 <_malloc_r>
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	b360      	cbz	r0, 8006020 <__ssputs_r+0xa0>
 8005fc6:	6921      	ldr	r1, [r4, #16]
 8005fc8:	464a      	mov	r2, r9
 8005fca:	f000 faeb 	bl	80065a4 <memcpy>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	6126      	str	r6, [r4, #16]
 8005fdc:	6165      	str	r5, [r4, #20]
 8005fde:	444e      	add	r6, r9
 8005fe0:	eba5 0509 	sub.w	r5, r5, r9
 8005fe4:	6026      	str	r6, [r4, #0]
 8005fe6:	60a5      	str	r5, [r4, #8]
 8005fe8:	463e      	mov	r6, r7
 8005fea:	42be      	cmp	r6, r7
 8005fec:	d900      	bls.n	8005ff0 <__ssputs_r+0x70>
 8005fee:	463e      	mov	r6, r7
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	f000 faab 	bl	8006550 <memmove>
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	1b9b      	subs	r3, r3, r6
 8005ffe:	60a3      	str	r3, [r4, #8]
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	4433      	add	r3, r6
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	2000      	movs	r0, #0
 8006008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600c:	462a      	mov	r2, r5
 800600e:	f000 fad7 	bl	80065c0 <_realloc_r>
 8006012:	4606      	mov	r6, r0
 8006014:	2800      	cmp	r0, #0
 8006016:	d1e0      	bne.n	8005fda <__ssputs_r+0x5a>
 8006018:	6921      	ldr	r1, [r4, #16]
 800601a:	4650      	mov	r0, sl
 800601c:	f7ff feb8 	bl	8005d90 <_free_r>
 8006020:	230c      	movs	r3, #12
 8006022:	f8ca 3000 	str.w	r3, [sl]
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	e7e9      	b.n	8006008 <__ssputs_r+0x88>

08006034 <_svfiprintf_r>:
 8006034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	4698      	mov	r8, r3
 800603a:	898b      	ldrh	r3, [r1, #12]
 800603c:	061b      	lsls	r3, r3, #24
 800603e:	b09d      	sub	sp, #116	; 0x74
 8006040:	4607      	mov	r7, r0
 8006042:	460d      	mov	r5, r1
 8006044:	4614      	mov	r4, r2
 8006046:	d50e      	bpl.n	8006066 <_svfiprintf_r+0x32>
 8006048:	690b      	ldr	r3, [r1, #16]
 800604a:	b963      	cbnz	r3, 8006066 <_svfiprintf_r+0x32>
 800604c:	2140      	movs	r1, #64	; 0x40
 800604e:	f7ff ff0b 	bl	8005e68 <_malloc_r>
 8006052:	6028      	str	r0, [r5, #0]
 8006054:	6128      	str	r0, [r5, #16]
 8006056:	b920      	cbnz	r0, 8006062 <_svfiprintf_r+0x2e>
 8006058:	230c      	movs	r3, #12
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e0d0      	b.n	8006204 <_svfiprintf_r+0x1d0>
 8006062:	2340      	movs	r3, #64	; 0x40
 8006064:	616b      	str	r3, [r5, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	9309      	str	r3, [sp, #36]	; 0x24
 800606a:	2320      	movs	r3, #32
 800606c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006070:	f8cd 800c 	str.w	r8, [sp, #12]
 8006074:	2330      	movs	r3, #48	; 0x30
 8006076:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800621c <_svfiprintf_r+0x1e8>
 800607a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800607e:	f04f 0901 	mov.w	r9, #1
 8006082:	4623      	mov	r3, r4
 8006084:	469a      	mov	sl, r3
 8006086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800608a:	b10a      	cbz	r2, 8006090 <_svfiprintf_r+0x5c>
 800608c:	2a25      	cmp	r2, #37	; 0x25
 800608e:	d1f9      	bne.n	8006084 <_svfiprintf_r+0x50>
 8006090:	ebba 0b04 	subs.w	fp, sl, r4
 8006094:	d00b      	beq.n	80060ae <_svfiprintf_r+0x7a>
 8006096:	465b      	mov	r3, fp
 8006098:	4622      	mov	r2, r4
 800609a:	4629      	mov	r1, r5
 800609c:	4638      	mov	r0, r7
 800609e:	f7ff ff6f 	bl	8005f80 <__ssputs_r>
 80060a2:	3001      	adds	r0, #1
 80060a4:	f000 80a9 	beq.w	80061fa <_svfiprintf_r+0x1c6>
 80060a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060aa:	445a      	add	r2, fp
 80060ac:	9209      	str	r2, [sp, #36]	; 0x24
 80060ae:	f89a 3000 	ldrb.w	r3, [sl]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80a1 	beq.w	80061fa <_svfiprintf_r+0x1c6>
 80060b8:	2300      	movs	r3, #0
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c2:	f10a 0a01 	add.w	sl, sl, #1
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ce:	931a      	str	r3, [sp, #104]	; 0x68
 80060d0:	4654      	mov	r4, sl
 80060d2:	2205      	movs	r2, #5
 80060d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d8:	4850      	ldr	r0, [pc, #320]	; (800621c <_svfiprintf_r+0x1e8>)
 80060da:	f7fa f889 	bl	80001f0 <memchr>
 80060de:	9a04      	ldr	r2, [sp, #16]
 80060e0:	b9d8      	cbnz	r0, 800611a <_svfiprintf_r+0xe6>
 80060e2:	06d0      	lsls	r0, r2, #27
 80060e4:	bf44      	itt	mi
 80060e6:	2320      	movmi	r3, #32
 80060e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ec:	0711      	lsls	r1, r2, #28
 80060ee:	bf44      	itt	mi
 80060f0:	232b      	movmi	r3, #43	; 0x2b
 80060f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f6:	f89a 3000 	ldrb.w	r3, [sl]
 80060fa:	2b2a      	cmp	r3, #42	; 0x2a
 80060fc:	d015      	beq.n	800612a <_svfiprintf_r+0xf6>
 80060fe:	9a07      	ldr	r2, [sp, #28]
 8006100:	4654      	mov	r4, sl
 8006102:	2000      	movs	r0, #0
 8006104:	f04f 0c0a 	mov.w	ip, #10
 8006108:	4621      	mov	r1, r4
 800610a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800610e:	3b30      	subs	r3, #48	; 0x30
 8006110:	2b09      	cmp	r3, #9
 8006112:	d94d      	bls.n	80061b0 <_svfiprintf_r+0x17c>
 8006114:	b1b0      	cbz	r0, 8006144 <_svfiprintf_r+0x110>
 8006116:	9207      	str	r2, [sp, #28]
 8006118:	e014      	b.n	8006144 <_svfiprintf_r+0x110>
 800611a:	eba0 0308 	sub.w	r3, r0, r8
 800611e:	fa09 f303 	lsl.w	r3, r9, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	46a2      	mov	sl, r4
 8006128:	e7d2      	b.n	80060d0 <_svfiprintf_r+0x9c>
 800612a:	9b03      	ldr	r3, [sp, #12]
 800612c:	1d19      	adds	r1, r3, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	9103      	str	r1, [sp, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	bfbb      	ittet	lt
 8006136:	425b      	neglt	r3, r3
 8006138:	f042 0202 	orrlt.w	r2, r2, #2
 800613c:	9307      	strge	r3, [sp, #28]
 800613e:	9307      	strlt	r3, [sp, #28]
 8006140:	bfb8      	it	lt
 8006142:	9204      	strlt	r2, [sp, #16]
 8006144:	7823      	ldrb	r3, [r4, #0]
 8006146:	2b2e      	cmp	r3, #46	; 0x2e
 8006148:	d10c      	bne.n	8006164 <_svfiprintf_r+0x130>
 800614a:	7863      	ldrb	r3, [r4, #1]
 800614c:	2b2a      	cmp	r3, #42	; 0x2a
 800614e:	d134      	bne.n	80061ba <_svfiprintf_r+0x186>
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	1d1a      	adds	r2, r3, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	9203      	str	r2, [sp, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	bfb8      	it	lt
 800615c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006160:	3402      	adds	r4, #2
 8006162:	9305      	str	r3, [sp, #20]
 8006164:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800622c <_svfiprintf_r+0x1f8>
 8006168:	7821      	ldrb	r1, [r4, #0]
 800616a:	2203      	movs	r2, #3
 800616c:	4650      	mov	r0, sl
 800616e:	f7fa f83f 	bl	80001f0 <memchr>
 8006172:	b138      	cbz	r0, 8006184 <_svfiprintf_r+0x150>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	eba0 000a 	sub.w	r0, r0, sl
 800617a:	2240      	movs	r2, #64	; 0x40
 800617c:	4082      	lsls	r2, r0
 800617e:	4313      	orrs	r3, r2
 8006180:	3401      	adds	r4, #1
 8006182:	9304      	str	r3, [sp, #16]
 8006184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006188:	4825      	ldr	r0, [pc, #148]	; (8006220 <_svfiprintf_r+0x1ec>)
 800618a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800618e:	2206      	movs	r2, #6
 8006190:	f7fa f82e 	bl	80001f0 <memchr>
 8006194:	2800      	cmp	r0, #0
 8006196:	d038      	beq.n	800620a <_svfiprintf_r+0x1d6>
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <_svfiprintf_r+0x1f0>)
 800619a:	bb1b      	cbnz	r3, 80061e4 <_svfiprintf_r+0x1b0>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	3307      	adds	r3, #7
 80061a0:	f023 0307 	bic.w	r3, r3, #7
 80061a4:	3308      	adds	r3, #8
 80061a6:	9303      	str	r3, [sp, #12]
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	4433      	add	r3, r6
 80061ac:	9309      	str	r3, [sp, #36]	; 0x24
 80061ae:	e768      	b.n	8006082 <_svfiprintf_r+0x4e>
 80061b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b4:	460c      	mov	r4, r1
 80061b6:	2001      	movs	r0, #1
 80061b8:	e7a6      	b.n	8006108 <_svfiprintf_r+0xd4>
 80061ba:	2300      	movs	r3, #0
 80061bc:	3401      	adds	r4, #1
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	4619      	mov	r1, r3
 80061c2:	f04f 0c0a 	mov.w	ip, #10
 80061c6:	4620      	mov	r0, r4
 80061c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061cc:	3a30      	subs	r2, #48	; 0x30
 80061ce:	2a09      	cmp	r2, #9
 80061d0:	d903      	bls.n	80061da <_svfiprintf_r+0x1a6>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0c6      	beq.n	8006164 <_svfiprintf_r+0x130>
 80061d6:	9105      	str	r1, [sp, #20]
 80061d8:	e7c4      	b.n	8006164 <_svfiprintf_r+0x130>
 80061da:	fb0c 2101 	mla	r1, ip, r1, r2
 80061de:	4604      	mov	r4, r0
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7f0      	b.n	80061c6 <_svfiprintf_r+0x192>
 80061e4:	ab03      	add	r3, sp, #12
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	462a      	mov	r2, r5
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <_svfiprintf_r+0x1f4>)
 80061ec:	a904      	add	r1, sp, #16
 80061ee:	4638      	mov	r0, r7
 80061f0:	f3af 8000 	nop.w
 80061f4:	1c42      	adds	r2, r0, #1
 80061f6:	4606      	mov	r6, r0
 80061f8:	d1d6      	bne.n	80061a8 <_svfiprintf_r+0x174>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	065b      	lsls	r3, r3, #25
 80061fe:	f53f af2d 	bmi.w	800605c <_svfiprintf_r+0x28>
 8006202:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006204:	b01d      	add	sp, #116	; 0x74
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	ab03      	add	r3, sp, #12
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	462a      	mov	r2, r5
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <_svfiprintf_r+0x1f4>)
 8006212:	a904      	add	r1, sp, #16
 8006214:	4638      	mov	r0, r7
 8006216:	f000 f879 	bl	800630c <_printf_i>
 800621a:	e7eb      	b.n	80061f4 <_svfiprintf_r+0x1c0>
 800621c:	08054efc 	.word	0x08054efc
 8006220:	08054f06 	.word	0x08054f06
 8006224:	00000000 	.word	0x00000000
 8006228:	08005f81 	.word	0x08005f81
 800622c:	08054f02 	.word	0x08054f02

08006230 <_printf_common>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	4616      	mov	r6, r2
 8006236:	4699      	mov	r9, r3
 8006238:	688a      	ldr	r2, [r1, #8]
 800623a:	690b      	ldr	r3, [r1, #16]
 800623c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006240:	4293      	cmp	r3, r2
 8006242:	bfb8      	it	lt
 8006244:	4613      	movlt	r3, r2
 8006246:	6033      	str	r3, [r6, #0]
 8006248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800624c:	4607      	mov	r7, r0
 800624e:	460c      	mov	r4, r1
 8006250:	b10a      	cbz	r2, 8006256 <_printf_common+0x26>
 8006252:	3301      	adds	r3, #1
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0699      	lsls	r1, r3, #26
 800625a:	bf42      	ittt	mi
 800625c:	6833      	ldrmi	r3, [r6, #0]
 800625e:	3302      	addmi	r3, #2
 8006260:	6033      	strmi	r3, [r6, #0]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	f015 0506 	ands.w	r5, r5, #6
 8006268:	d106      	bne.n	8006278 <_printf_common+0x48>
 800626a:	f104 0a19 	add.w	sl, r4, #25
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	6832      	ldr	r2, [r6, #0]
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	42ab      	cmp	r3, r5
 8006276:	dc26      	bgt.n	80062c6 <_printf_common+0x96>
 8006278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800627c:	1e13      	subs	r3, r2, #0
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	bf18      	it	ne
 8006282:	2301      	movne	r3, #1
 8006284:	0692      	lsls	r2, r2, #26
 8006286:	d42b      	bmi.n	80062e0 <_printf_common+0xb0>
 8006288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628c:	4649      	mov	r1, r9
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d01e      	beq.n	80062d4 <_printf_common+0xa4>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	6922      	ldr	r2, [r4, #16]
 800629a:	f003 0306 	and.w	r3, r3, #6
 800629e:	2b04      	cmp	r3, #4
 80062a0:	bf02      	ittt	eq
 80062a2:	68e5      	ldreq	r5, [r4, #12]
 80062a4:	6833      	ldreq	r3, [r6, #0]
 80062a6:	1aed      	subeq	r5, r5, r3
 80062a8:	68a3      	ldr	r3, [r4, #8]
 80062aa:	bf0c      	ite	eq
 80062ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b0:	2500      	movne	r5, #0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bfc4      	itt	gt
 80062b6:	1a9b      	subgt	r3, r3, r2
 80062b8:	18ed      	addgt	r5, r5, r3
 80062ba:	2600      	movs	r6, #0
 80062bc:	341a      	adds	r4, #26
 80062be:	42b5      	cmp	r5, r6
 80062c0:	d11a      	bne.n	80062f8 <_printf_common+0xc8>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e008      	b.n	80062d8 <_printf_common+0xa8>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	4649      	mov	r1, r9
 80062cc:	4638      	mov	r0, r7
 80062ce:	47c0      	blx	r8
 80062d0:	3001      	adds	r0, #1
 80062d2:	d103      	bne.n	80062dc <_printf_common+0xac>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	3501      	adds	r5, #1
 80062de:	e7c6      	b.n	800626e <_printf_common+0x3e>
 80062e0:	18e1      	adds	r1, r4, r3
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	2030      	movs	r0, #48	; 0x30
 80062e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ea:	4422      	add	r2, r4
 80062ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f4:	3302      	adds	r3, #2
 80062f6:	e7c7      	b.n	8006288 <_printf_common+0x58>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4622      	mov	r2, r4
 80062fc:	4649      	mov	r1, r9
 80062fe:	4638      	mov	r0, r7
 8006300:	47c0      	blx	r8
 8006302:	3001      	adds	r0, #1
 8006304:	d0e6      	beq.n	80062d4 <_printf_common+0xa4>
 8006306:	3601      	adds	r6, #1
 8006308:	e7d9      	b.n	80062be <_printf_common+0x8e>
	...

0800630c <_printf_i>:
 800630c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	7e0f      	ldrb	r7, [r1, #24]
 8006312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006314:	2f78      	cmp	r7, #120	; 0x78
 8006316:	4691      	mov	r9, r2
 8006318:	4680      	mov	r8, r0
 800631a:	460c      	mov	r4, r1
 800631c:	469a      	mov	sl, r3
 800631e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006322:	d807      	bhi.n	8006334 <_printf_i+0x28>
 8006324:	2f62      	cmp	r7, #98	; 0x62
 8006326:	d80a      	bhi.n	800633e <_printf_i+0x32>
 8006328:	2f00      	cmp	r7, #0
 800632a:	f000 80d4 	beq.w	80064d6 <_printf_i+0x1ca>
 800632e:	2f58      	cmp	r7, #88	; 0x58
 8006330:	f000 80c0 	beq.w	80064b4 <_printf_i+0x1a8>
 8006334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800633c:	e03a      	b.n	80063b4 <_printf_i+0xa8>
 800633e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006342:	2b15      	cmp	r3, #21
 8006344:	d8f6      	bhi.n	8006334 <_printf_i+0x28>
 8006346:	a101      	add	r1, pc, #4	; (adr r1, 800634c <_printf_i+0x40>)
 8006348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800634c:	080063a5 	.word	0x080063a5
 8006350:	080063b9 	.word	0x080063b9
 8006354:	08006335 	.word	0x08006335
 8006358:	08006335 	.word	0x08006335
 800635c:	08006335 	.word	0x08006335
 8006360:	08006335 	.word	0x08006335
 8006364:	080063b9 	.word	0x080063b9
 8006368:	08006335 	.word	0x08006335
 800636c:	08006335 	.word	0x08006335
 8006370:	08006335 	.word	0x08006335
 8006374:	08006335 	.word	0x08006335
 8006378:	080064bd 	.word	0x080064bd
 800637c:	080063e5 	.word	0x080063e5
 8006380:	08006477 	.word	0x08006477
 8006384:	08006335 	.word	0x08006335
 8006388:	08006335 	.word	0x08006335
 800638c:	080064df 	.word	0x080064df
 8006390:	08006335 	.word	0x08006335
 8006394:	080063e5 	.word	0x080063e5
 8006398:	08006335 	.word	0x08006335
 800639c:	08006335 	.word	0x08006335
 80063a0:	0800647f 	.word	0x0800647f
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	602a      	str	r2, [r5, #0]
 80063ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b4:	2301      	movs	r3, #1
 80063b6:	e09f      	b.n	80064f8 <_printf_i+0x1ec>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	0607      	lsls	r7, r0, #24
 80063be:	f103 0104 	add.w	r1, r3, #4
 80063c2:	6029      	str	r1, [r5, #0]
 80063c4:	d501      	bpl.n	80063ca <_printf_i+0xbe>
 80063c6:	681e      	ldr	r6, [r3, #0]
 80063c8:	e003      	b.n	80063d2 <_printf_i+0xc6>
 80063ca:	0646      	lsls	r6, r0, #25
 80063cc:	d5fb      	bpl.n	80063c6 <_printf_i+0xba>
 80063ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	da03      	bge.n	80063de <_printf_i+0xd2>
 80063d6:	232d      	movs	r3, #45	; 0x2d
 80063d8:	4276      	negs	r6, r6
 80063da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063de:	485a      	ldr	r0, [pc, #360]	; (8006548 <_printf_i+0x23c>)
 80063e0:	230a      	movs	r3, #10
 80063e2:	e012      	b.n	800640a <_printf_i+0xfe>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	1d19      	adds	r1, r3, #4
 80063ea:	6029      	str	r1, [r5, #0]
 80063ec:	0605      	lsls	r5, r0, #24
 80063ee:	d501      	bpl.n	80063f4 <_printf_i+0xe8>
 80063f0:	681e      	ldr	r6, [r3, #0]
 80063f2:	e002      	b.n	80063fa <_printf_i+0xee>
 80063f4:	0641      	lsls	r1, r0, #25
 80063f6:	d5fb      	bpl.n	80063f0 <_printf_i+0xe4>
 80063f8:	881e      	ldrh	r6, [r3, #0]
 80063fa:	4853      	ldr	r0, [pc, #332]	; (8006548 <_printf_i+0x23c>)
 80063fc:	2f6f      	cmp	r7, #111	; 0x6f
 80063fe:	bf0c      	ite	eq
 8006400:	2308      	moveq	r3, #8
 8006402:	230a      	movne	r3, #10
 8006404:	2100      	movs	r1, #0
 8006406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800640a:	6865      	ldr	r5, [r4, #4]
 800640c:	60a5      	str	r5, [r4, #8]
 800640e:	2d00      	cmp	r5, #0
 8006410:	bfa2      	ittt	ge
 8006412:	6821      	ldrge	r1, [r4, #0]
 8006414:	f021 0104 	bicge.w	r1, r1, #4
 8006418:	6021      	strge	r1, [r4, #0]
 800641a:	b90e      	cbnz	r6, 8006420 <_printf_i+0x114>
 800641c:	2d00      	cmp	r5, #0
 800641e:	d04b      	beq.n	80064b8 <_printf_i+0x1ac>
 8006420:	4615      	mov	r5, r2
 8006422:	fbb6 f1f3 	udiv	r1, r6, r3
 8006426:	fb03 6711 	mls	r7, r3, r1, r6
 800642a:	5dc7      	ldrb	r7, [r0, r7]
 800642c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006430:	4637      	mov	r7, r6
 8006432:	42bb      	cmp	r3, r7
 8006434:	460e      	mov	r6, r1
 8006436:	d9f4      	bls.n	8006422 <_printf_i+0x116>
 8006438:	2b08      	cmp	r3, #8
 800643a:	d10b      	bne.n	8006454 <_printf_i+0x148>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07de      	lsls	r6, r3, #31
 8006440:	d508      	bpl.n	8006454 <_printf_i+0x148>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	6861      	ldr	r1, [r4, #4]
 8006446:	4299      	cmp	r1, r3
 8006448:	bfde      	ittt	le
 800644a:	2330      	movle	r3, #48	; 0x30
 800644c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006454:	1b52      	subs	r2, r2, r5
 8006456:	6122      	str	r2, [r4, #16]
 8006458:	f8cd a000 	str.w	sl, [sp]
 800645c:	464b      	mov	r3, r9
 800645e:	aa03      	add	r2, sp, #12
 8006460:	4621      	mov	r1, r4
 8006462:	4640      	mov	r0, r8
 8006464:	f7ff fee4 	bl	8006230 <_printf_common>
 8006468:	3001      	adds	r0, #1
 800646a:	d14a      	bne.n	8006502 <_printf_i+0x1f6>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	b004      	add	sp, #16
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f043 0320 	orr.w	r3, r3, #32
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	4833      	ldr	r0, [pc, #204]	; (800654c <_printf_i+0x240>)
 8006480:	2778      	movs	r7, #120	; 0x78
 8006482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	6829      	ldr	r1, [r5, #0]
 800648a:	061f      	lsls	r7, r3, #24
 800648c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006490:	d402      	bmi.n	8006498 <_printf_i+0x18c>
 8006492:	065f      	lsls	r7, r3, #25
 8006494:	bf48      	it	mi
 8006496:	b2b6      	uxthmi	r6, r6
 8006498:	07df      	lsls	r7, r3, #31
 800649a:	bf48      	it	mi
 800649c:	f043 0320 	orrmi.w	r3, r3, #32
 80064a0:	6029      	str	r1, [r5, #0]
 80064a2:	bf48      	it	mi
 80064a4:	6023      	strmi	r3, [r4, #0]
 80064a6:	b91e      	cbnz	r6, 80064b0 <_printf_i+0x1a4>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	2310      	movs	r3, #16
 80064b2:	e7a7      	b.n	8006404 <_printf_i+0xf8>
 80064b4:	4824      	ldr	r0, [pc, #144]	; (8006548 <_printf_i+0x23c>)
 80064b6:	e7e4      	b.n	8006482 <_printf_i+0x176>
 80064b8:	4615      	mov	r5, r2
 80064ba:	e7bd      	b.n	8006438 <_printf_i+0x12c>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	6826      	ldr	r6, [r4, #0]
 80064c0:	6961      	ldr	r1, [r4, #20]
 80064c2:	1d18      	adds	r0, r3, #4
 80064c4:	6028      	str	r0, [r5, #0]
 80064c6:	0635      	lsls	r5, r6, #24
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0x1c4>
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0x1ca>
 80064d0:	0670      	lsls	r0, r6, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0x1c0>
 80064d4:	8019      	strh	r1, [r3, #0]
 80064d6:	2300      	movs	r3, #0
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	4615      	mov	r5, r2
 80064dc:	e7bc      	b.n	8006458 <_printf_i+0x14c>
 80064de:	682b      	ldr	r3, [r5, #0]
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	681d      	ldr	r5, [r3, #0]
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	2100      	movs	r1, #0
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7f9 fe80 	bl	80001f0 <memchr>
 80064f0:	b108      	cbz	r0, 80064f6 <_printf_i+0x1ea>
 80064f2:	1b40      	subs	r0, r0, r5
 80064f4:	6060      	str	r0, [r4, #4]
 80064f6:	6863      	ldr	r3, [r4, #4]
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	2300      	movs	r3, #0
 80064fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006500:	e7aa      	b.n	8006458 <_printf_i+0x14c>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	462a      	mov	r2, r5
 8006506:	4649      	mov	r1, r9
 8006508:	4640      	mov	r0, r8
 800650a:	47d0      	blx	sl
 800650c:	3001      	adds	r0, #1
 800650e:	d0ad      	beq.n	800646c <_printf_i+0x160>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	079b      	lsls	r3, r3, #30
 8006514:	d413      	bmi.n	800653e <_printf_i+0x232>
 8006516:	68e0      	ldr	r0, [r4, #12]
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	4298      	cmp	r0, r3
 800651c:	bfb8      	it	lt
 800651e:	4618      	movlt	r0, r3
 8006520:	e7a6      	b.n	8006470 <_printf_i+0x164>
 8006522:	2301      	movs	r3, #1
 8006524:	4632      	mov	r2, r6
 8006526:	4649      	mov	r1, r9
 8006528:	4640      	mov	r0, r8
 800652a:	47d0      	blx	sl
 800652c:	3001      	adds	r0, #1
 800652e:	d09d      	beq.n	800646c <_printf_i+0x160>
 8006530:	3501      	adds	r5, #1
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	9903      	ldr	r1, [sp, #12]
 8006536:	1a5b      	subs	r3, r3, r1
 8006538:	42ab      	cmp	r3, r5
 800653a:	dcf2      	bgt.n	8006522 <_printf_i+0x216>
 800653c:	e7eb      	b.n	8006516 <_printf_i+0x20a>
 800653e:	2500      	movs	r5, #0
 8006540:	f104 0619 	add.w	r6, r4, #25
 8006544:	e7f5      	b.n	8006532 <_printf_i+0x226>
 8006546:	bf00      	nop
 8006548:	08054f0d 	.word	0x08054f0d
 800654c:	08054f1e 	.word	0x08054f1e

08006550 <memmove>:
 8006550:	4288      	cmp	r0, r1
 8006552:	b510      	push	{r4, lr}
 8006554:	eb01 0402 	add.w	r4, r1, r2
 8006558:	d902      	bls.n	8006560 <memmove+0x10>
 800655a:	4284      	cmp	r4, r0
 800655c:	4623      	mov	r3, r4
 800655e:	d807      	bhi.n	8006570 <memmove+0x20>
 8006560:	1e43      	subs	r3, r0, #1
 8006562:	42a1      	cmp	r1, r4
 8006564:	d008      	beq.n	8006578 <memmove+0x28>
 8006566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800656a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800656e:	e7f8      	b.n	8006562 <memmove+0x12>
 8006570:	4402      	add	r2, r0
 8006572:	4601      	mov	r1, r0
 8006574:	428a      	cmp	r2, r1
 8006576:	d100      	bne.n	800657a <memmove+0x2a>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800657e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006582:	e7f7      	b.n	8006574 <memmove+0x24>

08006584 <_sbrk_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d06      	ldr	r5, [pc, #24]	; (80065a0 <_sbrk_r+0x1c>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f7fb fba0 	bl	8001cd4 <_sbrk>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_sbrk_r+0x1a>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_sbrk_r+0x1a>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	200003d0 	.word	0x200003d0

080065a4 <memcpy>:
 80065a4:	440a      	add	r2, r1
 80065a6:	4291      	cmp	r1, r2
 80065a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ac:	d100      	bne.n	80065b0 <memcpy+0xc>
 80065ae:	4770      	bx	lr
 80065b0:	b510      	push	{r4, lr}
 80065b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ba:	4291      	cmp	r1, r2
 80065bc:	d1f9      	bne.n	80065b2 <memcpy+0xe>
 80065be:	bd10      	pop	{r4, pc}

080065c0 <_realloc_r>:
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4680      	mov	r8, r0
 80065c6:	4614      	mov	r4, r2
 80065c8:	460e      	mov	r6, r1
 80065ca:	b921      	cbnz	r1, 80065d6 <_realloc_r+0x16>
 80065cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	4611      	mov	r1, r2
 80065d2:	f7ff bc49 	b.w	8005e68 <_malloc_r>
 80065d6:	b92a      	cbnz	r2, 80065e4 <_realloc_r+0x24>
 80065d8:	f7ff fbda 	bl	8005d90 <_free_r>
 80065dc:	4625      	mov	r5, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	f000 f81b 	bl	800661e <_malloc_usable_size_r>
 80065e8:	4284      	cmp	r4, r0
 80065ea:	4607      	mov	r7, r0
 80065ec:	d802      	bhi.n	80065f4 <_realloc_r+0x34>
 80065ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065f2:	d812      	bhi.n	800661a <_realloc_r+0x5a>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7ff fc36 	bl	8005e68 <_malloc_r>
 80065fc:	4605      	mov	r5, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0ed      	beq.n	80065de <_realloc_r+0x1e>
 8006602:	42bc      	cmp	r4, r7
 8006604:	4622      	mov	r2, r4
 8006606:	4631      	mov	r1, r6
 8006608:	bf28      	it	cs
 800660a:	463a      	movcs	r2, r7
 800660c:	f7ff ffca 	bl	80065a4 <memcpy>
 8006610:	4631      	mov	r1, r6
 8006612:	4640      	mov	r0, r8
 8006614:	f7ff fbbc 	bl	8005d90 <_free_r>
 8006618:	e7e1      	b.n	80065de <_realloc_r+0x1e>
 800661a:	4635      	mov	r5, r6
 800661c:	e7df      	b.n	80065de <_realloc_r+0x1e>

0800661e <_malloc_usable_size_r>:
 800661e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006622:	1f18      	subs	r0, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	580b      	ldrlt	r3, [r1, r0]
 800662a:	18c0      	addlt	r0, r0, r3
 800662c:	4770      	bx	lr
	...

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr
